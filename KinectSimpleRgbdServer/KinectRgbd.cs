// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_rgbd.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kinectrgbd {

  namespace Proto {

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class KinectRgbd {

      #region Descriptor
      public static pbr::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbr::FileDescriptor descriptor;

      static KinectRgbd() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChFraW5lY3RfcmdiZC5wcm90bxIKa2luZWN0cmdiZCIrCghQb3NpdGlvbhIJ", 
              "CgF4GAEgASgCEgkKAXkYAiABKAISCQoBZBgDIAEoAiIoCgVDb2xvchIJCgFy", 
              "GAEgASgFEgkKAWcYAiABKAUSCQoBYhgDIAEoBSJRCgVQb2ludBImCghwb3Np", 
              "dGlvbhgBIAEoCzIULmtpbmVjdHJnYmQuUG9zaXRpb24SIAoFY29sb3IYAiAB", 
              "KAsyES5raW5lY3RyZ2JkLkNvbG9yIhkKB1JlcXVlc3QSDgoGaGVhZGVyGAEg", 
              "ASgFMkUKCktpbmVjdFJnYmQSNwoJR2V0UG9pbnRzEhMua2luZWN0cmdiZC5S", 
              "ZXF1ZXN0GhEua2luZWN0cmdiZC5Qb2ludCIAMAFCDwoHZXguZ3JwY6ICA1JU", 
              "R2IGcHJvdG8z"));
        descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbr::FileDescriptor[] { },
            new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
              new pbr::GeneratedCodeInfo(typeof(global::Kinectrgbd.Position), new[]{ "X", "Y", "D" }, null, null, null),
              new pbr::GeneratedCodeInfo(typeof(global::Kinectrgbd.Color), new[]{ "R", "G", "B" }, null, null, null),
              new pbr::GeneratedCodeInfo(typeof(global::Kinectrgbd.Point), new[]{ "Position", "Color" }, null, null, null),
              new pbr::GeneratedCodeInfo(typeof(global::Kinectrgbd.Request), new[]{ "Header" }, null, null, null)
            }));
      }
      #endregion

    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.Proto.KinectRgbd.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Position(Position other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      d_ = other.d_;
    }

    public Position Clone() {
      return new Position(this);
    }

    public const int XFieldNumber = 1;
    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    public const int YFieldNumber = 2;
    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    public const int DFieldNumber = 3;
    private float d_;
    public float D {
      get { return d_; }
      set {
        d_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (D != other.D) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (D != 0F) hash ^= D.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (D != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(D);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (D != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.D != 0F) {
        D = other.D;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            D = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Color : pb::IMessage<Color> {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.Proto.KinectRgbd.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Color(Color other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
    }

    public Color Clone() {
      return new Color(this);
    }

    public const int RFieldNumber = 1;
    private int r_;
    public int R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    public const int GFieldNumber = 2;
    private int g_;
    public int G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    public const int BFieldNumber = 3;
    private int b_;
    public int B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(B);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
      }
      return size;
    }

    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            R = input.ReadInt32();
            break;
          }
          case 16: {
            G = input.ReadInt32();
            break;
          }
          case 24: {
            B = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.Proto.KinectRgbd.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Point(Point other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      Color = other.color_ != null ? other.Color.Clone() : null;
    }

    public Point Clone() {
      return new Point(this);
    }

    public const int PositionFieldNumber = 1;
    private global::Kinectrgbd.Position position_;
    public global::Kinectrgbd.Position Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    public const int ColorFieldNumber = 2;
    private global::Kinectrgbd.Color color_;
    public global::Kinectrgbd.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (color_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      return size;
    }

    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Kinectrgbd.Position();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Kinectrgbd.Color();
        }
        Color.MergeFrom(other.Color);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Kinectrgbd.Position();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (color_ == null) {
              color_ = new global::Kinectrgbd.Color();
            }
            input.ReadMessage(color_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.Proto.KinectRgbd.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Request(Request other) : this() {
      header_ = other.header_;
    }

    public Request Clone() {
      return new Request(this);
    }

    public const int HeaderFieldNumber = 1;
    private int header_;
    public int Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Header != other.Header) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Header != 0) hash ^= Header.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Header != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Header);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Header != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Header);
      }
      return size;
    }

    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Header != 0) {
        Header = other.Header;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Header = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
