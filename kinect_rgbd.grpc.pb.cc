// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: kinect_rgbd.proto

#include "kinect_rgbd.pb.h"
#include "kinect_rgbd.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace kinectrgbd {

static const char* KinectRgbd_method_names[] = {
  "/kinectrgbd.KinectRgbd/SendPoints",
};

std::unique_ptr< KinectRgbd::Stub> KinectRgbd::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< KinectRgbd::Stub> stub(new KinectRgbd::Stub(channel));
  return stub;
}

KinectRgbd::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_SendPoints_(KinectRgbd_method_names[0], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::kinectrgbd::Point>* KinectRgbd::Stub::SendPointsRaw(::grpc::ClientContext* context, ::kinectrgbd::Response* response) {
  return new ::grpc::ClientWriter< ::kinectrgbd::Point>(channel_.get(), rpcmethod_SendPoints_, context, response);
}

::grpc::ClientAsyncWriter< ::kinectrgbd::Point>* KinectRgbd::Stub::AsyncSendPointsRaw(::grpc::ClientContext* context, ::kinectrgbd::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncWriter< ::kinectrgbd::Point>(channel_.get(), cq, rpcmethod_SendPoints_, context, response, tag);
}

KinectRgbd::AsyncService::AsyncService() : ::grpc::AsynchronousService(KinectRgbd_method_names, 1) {}

KinectRgbd::Service::~Service() {
  delete service_;
}

::grpc::Status KinectRgbd::Service::SendPoints(::grpc::ServerContext* context, ::grpc::ServerReader< ::kinectrgbd::Point>* reader, ::kinectrgbd::Response* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void KinectRgbd::AsyncService::RequestSendPoints(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::kinectrgbd::Response, ::kinectrgbd::Point>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* KinectRgbd::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      KinectRgbd_method_names[0],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< KinectRgbd::Service, ::kinectrgbd::Point, ::kinectrgbd::Response>(
          std::mem_fn(&KinectRgbd::Service::SendPoints), this)));
  return service_;
}


}  // namespace kinectrgbd

