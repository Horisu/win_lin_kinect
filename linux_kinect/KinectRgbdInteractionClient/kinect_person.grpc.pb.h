// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: kinect_person.proto
#ifndef GRPC_kinect_5fperson_2eproto__INCLUDED
#define GRPC_kinect_5fperson_2eproto__INCLUDED

#include "kinect_person.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace kinectperson {

class KinectPerson GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendPersonState(::grpc::ClientContext* context, const ::kinectperson::PersonStream& request, ::kinectperson::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kinectperson::Response>> AsyncSendPersonState(::grpc::ClientContext* context, const ::kinectperson::PersonStream& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kinectperson::Response>>(AsyncSendPersonStateRaw(context, request, cq));
    }
    virtual ::grpc::Status SendVoiceRecognition(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::kinectperson::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kinectperson::Response>> AsyncSendVoiceRecognition(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kinectperson::Response>>(AsyncSendVoiceRecognitionRaw(context, request, cq));
    }
    virtual ::grpc::Status SendConsoleCommand(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::kinectperson::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kinectperson::Response>> AsyncSendConsoleCommand(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kinectperson::Response>>(AsyncSendConsoleCommandRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateRobotClient(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::kinectperson::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kinectperson::Response>> AsyncCreateRobotClient(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kinectperson::Response>>(AsyncCreateRobotClientRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kinectperson::Response>* AsyncSendPersonStateRaw(::grpc::ClientContext* context, const ::kinectperson::PersonStream& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kinectperson::Response>* AsyncSendVoiceRecognitionRaw(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kinectperson::Response>* AsyncSendConsoleCommandRaw(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kinectperson::Response>* AsyncCreateRobotClientRaw(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendPersonState(::grpc::ClientContext* context, const ::kinectperson::PersonStream& request, ::kinectperson::Response* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>> AsyncSendPersonState(::grpc::ClientContext* context, const ::kinectperson::PersonStream& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>>(AsyncSendPersonStateRaw(context, request, cq));
    }
    ::grpc::Status SendVoiceRecognition(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::kinectperson::Response* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>> AsyncSendVoiceRecognition(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>>(AsyncSendVoiceRecognitionRaw(context, request, cq));
    }
    ::grpc::Status SendConsoleCommand(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::kinectperson::Response* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>> AsyncSendConsoleCommand(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>>(AsyncSendConsoleCommandRaw(context, request, cq));
    }
    ::grpc::Status CreateRobotClient(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::kinectperson::Response* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>> AsyncCreateRobotClient(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>>(AsyncCreateRobotClientRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>* AsyncSendPersonStateRaw(::grpc::ClientContext* context, const ::kinectperson::PersonStream& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>* AsyncSendVoiceRecognitionRaw(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>* AsyncSendConsoleCommandRaw(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>* AsyncCreateRobotClientRaw(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_SendPersonState_;
    const ::grpc::RpcMethod rpcmethod_SendVoiceRecognition_;
    const ::grpc::RpcMethod rpcmethod_SendConsoleCommand_;
    const ::grpc::RpcMethod rpcmethod_CreateRobotClient_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendPersonState(::grpc::ServerContext* context, const ::kinectperson::PersonStream* request, ::kinectperson::Response* response);
    virtual ::grpc::Status SendVoiceRecognition(::grpc::ServerContext* context, const ::kinectperson::Text* request, ::kinectperson::Response* response);
    virtual ::grpc::Status SendConsoleCommand(::grpc::ServerContext* context, const ::kinectperson::Text* request, ::kinectperson::Response* response);
    virtual ::grpc::Status CreateRobotClient(::grpc::ServerContext* context, const ::kinectperson::Text* request, ::kinectperson::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendPersonState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendPersonState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendPersonState() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPersonState(::grpc::ServerContext* context, const ::kinectperson::PersonStream* request, ::kinectperson::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPersonState(::grpc::ServerContext* context, ::kinectperson::PersonStream* request, ::grpc::ServerAsyncResponseWriter< ::kinectperson::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendVoiceRecognition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendVoiceRecognition() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendVoiceRecognition() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendVoiceRecognition(::grpc::ServerContext* context, const ::kinectperson::Text* request, ::kinectperson::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendVoiceRecognition(::grpc::ServerContext* context, ::kinectperson::Text* request, ::grpc::ServerAsyncResponseWriter< ::kinectperson::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendConsoleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendConsoleCommand() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendConsoleCommand() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendConsoleCommand(::grpc::ServerContext* context, const ::kinectperson::Text* request, ::kinectperson::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendConsoleCommand(::grpc::ServerContext* context, ::kinectperson::Text* request, ::grpc::ServerAsyncResponseWriter< ::kinectperson::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRobotClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateRobotClient() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateRobotClient() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRobotClient(::grpc::ServerContext* context, const ::kinectperson::Text* request, ::kinectperson::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRobotClient(::grpc::ServerContext* context, ::kinectperson::Text* request, ::grpc::ServerAsyncResponseWriter< ::kinectperson::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendPersonState<WithAsyncMethod_SendVoiceRecognition<WithAsyncMethod_SendConsoleCommand<WithAsyncMethod_CreateRobotClient<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SendPersonState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendPersonState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendPersonState() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPersonState(::grpc::ServerContext* context, const ::kinectperson::PersonStream* request, ::kinectperson::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendVoiceRecognition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendVoiceRecognition() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendVoiceRecognition() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendVoiceRecognition(::grpc::ServerContext* context, const ::kinectperson::Text* request, ::kinectperson::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendConsoleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendConsoleCommand() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendConsoleCommand() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendConsoleCommand(::grpc::ServerContext* context, const ::kinectperson::Text* request, ::kinectperson::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRobotClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateRobotClient() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateRobotClient() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRobotClient(::grpc::ServerContext* context, const ::kinectperson::Text* request, ::kinectperson::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace kinectperson


#endif  // GRPC_kinect_5fperson_2eproto__INCLUDED
