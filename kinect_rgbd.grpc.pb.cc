// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: kinect_rgbd.proto

#include "kinect_rgbd.pb.h"
#include "kinect_rgbd.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace kinectrgbd {

static const char* KinectRgbd_method_names[] = {
  "/kinectrgbd.KinectRgbd/GetPoints",
};

std::unique_ptr< KinectRgbd::Stub> KinectRgbd::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< KinectRgbd::Stub> stub(new KinectRgbd::Stub(channel));
  return stub;
}

KinectRgbd::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_GetPoints_(KinectRgbd_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kinectrgbd::Point>* KinectRgbd::Stub::GetPointsRaw(::grpc::ClientContext* context, const ::kinectrgbd::Request& request) {
  return new ::grpc::ClientReader< ::kinectrgbd::Point>(channel_.get(), rpcmethod_GetPoints_, context, request);
}

::grpc::ClientAsyncReader< ::kinectrgbd::Point>* KinectRgbd::Stub::AsyncGetPointsRaw(::grpc::ClientContext* context, const ::kinectrgbd::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::kinectrgbd::Point>(channel_.get(), cq, rpcmethod_GetPoints_, context, request, tag);
}

KinectRgbd::AsyncService::AsyncService() : ::grpc::AsynchronousService(KinectRgbd_method_names, 1) {}

KinectRgbd::Service::~Service() {
  delete service_;
}

::grpc::Status KinectRgbd::Service::GetPoints(::grpc::ServerContext* context, const ::kinectrgbd::Request* request, ::grpc::ServerWriter< ::kinectrgbd::Point>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void KinectRgbd::AsyncService::RequestGetPoints(::grpc::ServerContext* context, ::kinectrgbd::Request* request, ::grpc::ServerAsyncWriter< ::kinectrgbd::Point>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* KinectRgbd::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      KinectRgbd_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< KinectRgbd::Service, ::kinectrgbd::Request, ::kinectrgbd::Point>(
          std::mem_fn(&KinectRgbd::Service::GetPoints), this)));
  return service_;
}


}  // namespace kinectrgbd

