// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: kinect_rgbd.proto

#include "kinect_rgbd.pb.h"
#include "kinect_rgbd.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace kinectrgbd {

static const char* KinectRgbd_method_names[] = {
  "/kinectrgbd.KinectRgbd/CheckRequest",
  "/kinectrgbd.KinectRgbd/SendPoints",
  "/kinectrgbd.KinectRgbd/SendImage",
  "/kinectrgbd.KinectRgbd/ReturnPositionsFromPixels",
  "/kinectrgbd.KinectRgbd/ReturnPixelBoundsFromSpaceBounds",
  "/kinectrgbd.KinectRgbd/ReturnCognition",
};

std::unique_ptr< KinectRgbd::Stub> KinectRgbd::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< KinectRgbd::Stub> stub(new KinectRgbd::Stub(channel));
  return stub;
}

KinectRgbd::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CheckRequest_(KinectRgbd_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendPoints_(KinectRgbd_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendImage_(KinectRgbd_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReturnPositionsFromPixels_(KinectRgbd_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReturnPixelBoundsFromSpaceBounds_(KinectRgbd_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReturnCognition_(KinectRgbd_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KinectRgbd::Stub::CheckRequest(::grpc::ClientContext* context, const ::kinectrgbd::Header& request, ::kinectrgbd::Request* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CheckRequest_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectrgbd::Request>* KinectRgbd::Stub::AsyncCheckRequestRaw(::grpc::ClientContext* context, const ::kinectrgbd::Header& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectrgbd::Request>(channel_.get(), cq, rpcmethod_CheckRequest_, context, request);
}

::grpc::Status KinectRgbd::Stub::SendPoints(::grpc::ClientContext* context, const ::kinectrgbd::Points& request, ::kinectrgbd::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SendPoints_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectrgbd::Response>* KinectRgbd::Stub::AsyncSendPointsRaw(::grpc::ClientContext* context, const ::kinectrgbd::Points& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectrgbd::Response>(channel_.get(), cq, rpcmethod_SendPoints_, context, request);
}

::grpc::Status KinectRgbd::Stub::SendImage(::grpc::ClientContext* context, const ::kinectrgbd::Pixels& request, ::kinectrgbd::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SendImage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectrgbd::Response>* KinectRgbd::Stub::AsyncSendImageRaw(::grpc::ClientContext* context, const ::kinectrgbd::Pixels& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectrgbd::Response>(channel_.get(), cq, rpcmethod_SendImage_, context, request);
}

::grpc::Status KinectRgbd::Stub::ReturnPositionsFromPixels(::grpc::ClientContext* context, const ::kinectrgbd::DataStream& request, ::kinectrgbd::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ReturnPositionsFromPixels_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectrgbd::Response>* KinectRgbd::Stub::AsyncReturnPositionsFromPixelsRaw(::grpc::ClientContext* context, const ::kinectrgbd::DataStream& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectrgbd::Response>(channel_.get(), cq, rpcmethod_ReturnPositionsFromPixels_, context, request);
}

::grpc::Status KinectRgbd::Stub::ReturnPixelBoundsFromSpaceBounds(::grpc::ClientContext* context, const ::kinectrgbd::BitStream& request, ::kinectrgbd::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ReturnPixelBoundsFromSpaceBounds_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectrgbd::Response>* KinectRgbd::Stub::AsyncReturnPixelBoundsFromSpaceBoundsRaw(::grpc::ClientContext* context, const ::kinectrgbd::BitStream& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectrgbd::Response>(channel_.get(), cq, rpcmethod_ReturnPixelBoundsFromSpaceBounds_, context, request);
}

::grpc::Status KinectRgbd::Stub::ReturnCognition(::grpc::ClientContext* context, const ::kinectrgbd::DataStream& request, ::kinectrgbd::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ReturnCognition_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectrgbd::Response>* KinectRgbd::Stub::AsyncReturnCognitionRaw(::grpc::ClientContext* context, const ::kinectrgbd::DataStream& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectrgbd::Response>(channel_.get(), cq, rpcmethod_ReturnCognition_, context, request);
}

KinectRgbd::Service::Service() {
  (void)KinectRgbd_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectRgbd_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectRgbd::Service, ::kinectrgbd::Header, ::kinectrgbd::Request>(
          std::mem_fn(&KinectRgbd::Service::CheckRequest), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectRgbd_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectRgbd::Service, ::kinectrgbd::Points, ::kinectrgbd::Response>(
          std::mem_fn(&KinectRgbd::Service::SendPoints), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectRgbd_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectRgbd::Service, ::kinectrgbd::Pixels, ::kinectrgbd::Response>(
          std::mem_fn(&KinectRgbd::Service::SendImage), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectRgbd_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectRgbd::Service, ::kinectrgbd::DataStream, ::kinectrgbd::Response>(
          std::mem_fn(&KinectRgbd::Service::ReturnPositionsFromPixels), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectRgbd_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectRgbd::Service, ::kinectrgbd::BitStream, ::kinectrgbd::Response>(
          std::mem_fn(&KinectRgbd::Service::ReturnPixelBoundsFromSpaceBounds), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectRgbd_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectRgbd::Service, ::kinectrgbd::DataStream, ::kinectrgbd::Response>(
          std::mem_fn(&KinectRgbd::Service::ReturnCognition), this)));
}

KinectRgbd::Service::~Service() {
}

::grpc::Status KinectRgbd::Service::CheckRequest(::grpc::ServerContext* context, const ::kinectrgbd::Header* request, ::kinectrgbd::Request* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KinectRgbd::Service::SendPoints(::grpc::ServerContext* context, const ::kinectrgbd::Points* request, ::kinectrgbd::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KinectRgbd::Service::SendImage(::grpc::ServerContext* context, const ::kinectrgbd::Pixels* request, ::kinectrgbd::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KinectRgbd::Service::ReturnPositionsFromPixels(::grpc::ServerContext* context, const ::kinectrgbd::DataStream* request, ::kinectrgbd::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KinectRgbd::Service::ReturnPixelBoundsFromSpaceBounds(::grpc::ServerContext* context, const ::kinectrgbd::BitStream* request, ::kinectrgbd::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KinectRgbd::Service::ReturnCognition(::grpc::ServerContext* context, const ::kinectrgbd::DataStream* request, ::kinectrgbd::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kinectrgbd

