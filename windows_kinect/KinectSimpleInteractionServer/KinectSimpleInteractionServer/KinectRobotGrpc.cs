// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_robot.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Kinectrobot {
  public static class KinectRobot
  {
    static readonly string __ServiceName = "kinectrobot.KinectRobot";

    static readonly Marshaller<global::Kinectrobot.Speech> __Marshaller_Speech = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kinectrobot.Speech.Parser.ParseFrom);
    static readonly Marshaller<global::Kinectrobot.Response> __Marshaller_Response = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kinectrobot.Response.Parser.ParseFrom);
    static readonly Marshaller<global::Kinectrobot.VoiceTriggers> __Marshaller_VoiceTriggers = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kinectrobot.VoiceTriggers.Parser.ParseFrom);
    static readonly Marshaller<global::Kinectrobot.UrlInfo> __Marshaller_UrlInfo = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kinectrobot.UrlInfo.Parser.ParseFrom);

    static readonly Method<global::Kinectrobot.Speech, global::Kinectrobot.Response> __Method_SendSpeech = new Method<global::Kinectrobot.Speech, global::Kinectrobot.Response>(
        MethodType.Unary,
        __ServiceName,
        "SendSpeech",
        __Marshaller_Speech,
        __Marshaller_Response);

    static readonly Method<global::Kinectrobot.VoiceTriggers, global::Kinectrobot.Response> __Method_SetSTTBehavior = new Method<global::Kinectrobot.VoiceTriggers, global::Kinectrobot.Response>(
        MethodType.Unary,
        __ServiceName,
        "SetSTTBehavior",
        __Marshaller_VoiceTriggers,
        __Marshaller_Response);

    static readonly Method<global::Kinectrobot.UrlInfo, global::Kinectrobot.Response> __Method_WebAgent = new Method<global::Kinectrobot.UrlInfo, global::Kinectrobot.Response>(
        MethodType.Unary,
        __ServiceName,
        "WebAgent",
        __Marshaller_UrlInfo,
        __Marshaller_Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of KinectRobot</summary>
    public abstract class KinectRobotBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Kinectrobot.Response> SendSpeech(global::Kinectrobot.Speech request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kinectrobot.Response> SetSTTBehavior(global::Kinectrobot.VoiceTriggers request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///   rpc WriteLogOnWindows(Log) returns (Response) {}
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Kinectrobot.Response> WebAgent(global::Kinectrobot.UrlInfo request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for KinectRobot</summary>
    public class KinectRobotClient : ClientBase<KinectRobotClient>
    {
      /// <summary>Creates a new client for KinectRobot</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public KinectRobotClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for KinectRobot that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public KinectRobotClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected KinectRobotClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected KinectRobotClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Kinectrobot.Response SendSpeech(global::Kinectrobot.Speech request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendSpeech(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kinectrobot.Response SendSpeech(global::Kinectrobot.Speech request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendSpeech, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Kinectrobot.Response> SendSpeechAsync(global::Kinectrobot.Speech request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendSpeechAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Kinectrobot.Response> SendSpeechAsync(global::Kinectrobot.Speech request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendSpeech, null, options, request);
      }
      public virtual global::Kinectrobot.Response SetSTTBehavior(global::Kinectrobot.VoiceTriggers request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetSTTBehavior(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kinectrobot.Response SetSTTBehavior(global::Kinectrobot.VoiceTriggers request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSTTBehavior, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Kinectrobot.Response> SetSTTBehaviorAsync(global::Kinectrobot.VoiceTriggers request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetSTTBehaviorAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Kinectrobot.Response> SetSTTBehaviorAsync(global::Kinectrobot.VoiceTriggers request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSTTBehavior, null, options, request);
      }
      /// <summary>
      ///   rpc WriteLogOnWindows(Log) returns (Response) {}
      /// </summary>
      public virtual global::Kinectrobot.Response WebAgent(global::Kinectrobot.UrlInfo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WebAgent(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///   rpc WriteLogOnWindows(Log) returns (Response) {}
      /// </summary>
      public virtual global::Kinectrobot.Response WebAgent(global::Kinectrobot.UrlInfo request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WebAgent, null, options, request);
      }
      /// <summary>
      ///   rpc WriteLogOnWindows(Log) returns (Response) {}
      /// </summary>
      public virtual AsyncUnaryCall<global::Kinectrobot.Response> WebAgentAsync(global::Kinectrobot.UrlInfo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WebAgentAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///   rpc WriteLogOnWindows(Log) returns (Response) {}
      /// </summary>
      public virtual AsyncUnaryCall<global::Kinectrobot.Response> WebAgentAsync(global::Kinectrobot.UrlInfo request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WebAgent, null, options, request);
      }
      protected override KinectRobotClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new KinectRobotClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(KinectRobotBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendSpeech, serviceImpl.SendSpeech)
          .AddMethod(__Method_SetSTTBehavior, serviceImpl.SetSTTBehavior)
          .AddMethod(__Method_WebAgent, serviceImpl.WebAgent).Build();
    }

  }
}
#endregion
