// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_person.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kinectperson {

  /// <summary>Holder for reflection information generated from kinect_person.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class KinectPersonReflection {

    #region Descriptor
    /// <summary>File descriptor for kinect_person.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KinectPersonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNraW5lY3RfcGVyc29uLnByb3RvEgxraW5lY3RwZXJzb24iZQoERmFjZRIJ",
            "CgF4GAEgASgCEgkKAXkYAiABKAISDQoFd2lkdGgYAyABKAISDgoGaGVpZ2h0",
            "GAQgASgCEgwKBHJvbGwYBSABKAISDQoFcGl0Y2gYBiABKAISCwoDeWF3GAcg",
            "ASgCImsKBlBlcnNvbhIgCgRmYWNlGAEgASgLMhIua2luZWN0cGVyc29uLkZh",
            "Y2USEAoIc3BlYWtpbmcYAiABKAgSDwoHbG9va2luZxgDIAEoCBIQCghkaXN0",
            "YW5jZRgEIAEoAhIKCgJpZBgFIAEoBSJCCgxQZXJzb25TdHJlYW0SDgoGc3Rh",
            "dHVzGAEgASgFEiIKBGRhdGEYAiADKAsyFC5raW5lY3RwZXJzb24uUGVyc29u",
            "IhoKCFJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoCCIUCgRUZXh0EgwKBHRleHQY",
            "ASABKAkypAIKDEtpbmVjdFBlcnNvbhJHCg9TZW5kUGVyc29uU3RhdGUSGi5r",
            "aW5lY3RwZXJzb24uUGVyc29uU3RyZWFtGhYua2luZWN0cGVyc29uLlJlc3Bv",
            "bnNlIgASRAoUU2VuZFZvaWNlUmVjb2duaXRpb24SEi5raW5lY3RwZXJzb24u",
            "VGV4dBoWLmtpbmVjdHBlcnNvbi5SZXNwb25zZSIAEkIKElNlbmRDb25zb2xl",
            "Q29tbWFuZBISLmtpbmVjdHBlcnNvbi5UZXh0GhYua2luZWN0cGVyc29uLlJl",
            "c3BvbnNlIgASQQoRQ3JlYXRlUm9ib3RDbGllbnQSEi5raW5lY3RwZXJzb24u",
            "VGV4dBoWLmtpbmVjdHBlcnNvbi5SZXNwb25zZSIAQg8KB2V4LmdycGOiAgNS",
            "VEdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectperson.Face), global::Kinectperson.Face.Parser, new[]{ "X", "Y", "Width", "Height", "Roll", "Pitch", "Yaw" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectperson.Person), global::Kinectperson.Person.Parser, new[]{ "Face", "Speaking", "Looking", "Distance", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectperson.PersonStream), global::Kinectperson.PersonStream.Parser, new[]{ "Status", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectperson.Response), global::Kinectperson.Response.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectperson.Text), global::Kinectperson.Text.Parser, new[]{ "Text_" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Face : pb::IMessage<Face> {
    private static readonly pb::MessageParser<Face> _parser = new pb::MessageParser<Face>(() => new Face());
    public static pb::MessageParser<Face> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectperson.KinectPersonReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Face() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Face(Face other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      width_ = other.width_;
      height_ = other.height_;
      roll_ = other.roll_;
      pitch_ = other.pitch_;
      yaw_ = other.yaw_;
    }

    public Face Clone() {
      return new Face(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private float width_;
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private float height_;
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 5;
    private float roll_;
    public float Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 6;
    private float pitch_;
    public float Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 7;
    private float yaw_;
    public float Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Face);
    }

    public bool Equals(Face other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Roll != other.Roll) return false;
      if (Pitch != other.Pitch) return false;
      if (Yaw != other.Yaw) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Width != 0F) hash ^= Width.GetHashCode();
      if (Height != 0F) hash ^= Height.GetHashCode();
      if (Roll != 0F) hash ^= Roll.GetHashCode();
      if (Pitch != 0F) hash ^= Pitch.GetHashCode();
      if (Yaw != 0F) hash ^= Yaw.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Width != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Width);
      }
      if (Height != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Height);
      }
      if (Roll != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Roll);
      }
      if (Pitch != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Pitch);
      }
      if (Yaw != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Yaw);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (Roll != 0F) {
        size += 1 + 4;
      }
      if (Pitch != 0F) {
        size += 1 + 4;
      }
      if (Yaw != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Face other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      if (other.Roll != 0F) {
        Roll = other.Roll;
      }
      if (other.Pitch != 0F) {
        Pitch = other.Pitch;
      }
      if (other.Yaw != 0F) {
        Yaw = other.Yaw;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Width = input.ReadFloat();
            break;
          }
          case 37: {
            Height = input.ReadFloat();
            break;
          }
          case 45: {
            Roll = input.ReadFloat();
            break;
          }
          case 53: {
            Pitch = input.ReadFloat();
            break;
          }
          case 61: {
            Yaw = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Person : pb::IMessage<Person> {
    private static readonly pb::MessageParser<Person> _parser = new pb::MessageParser<Person>(() => new Person());
    public static pb::MessageParser<Person> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectperson.KinectPersonReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Person() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Person(Person other) : this() {
      Face = other.face_ != null ? other.Face.Clone() : null;
      speaking_ = other.speaking_;
      looking_ = other.looking_;
      distance_ = other.distance_;
      id_ = other.id_;
    }

    public Person Clone() {
      return new Person(this);
    }

    /// <summary>Field number for the "face" field.</summary>
    public const int FaceFieldNumber = 1;
    private global::Kinectperson.Face face_;
    public global::Kinectperson.Face Face {
      get { return face_; }
      set {
        face_ = value;
      }
    }

    /// <summary>Field number for the "speaking" field.</summary>
    public const int SpeakingFieldNumber = 2;
    private bool speaking_;
    public bool Speaking {
      get { return speaking_; }
      set {
        speaking_ = value;
      }
    }

    /// <summary>Field number for the "looking" field.</summary>
    public const int LookingFieldNumber = 3;
    private bool looking_;
    public bool Looking {
      get { return looking_; }
      set {
        looking_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 4;
    private float distance_;
    public float Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 5;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Person);
    }

    public bool Equals(Person other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Face, other.Face)) return false;
      if (Speaking != other.Speaking) return false;
      if (Looking != other.Looking) return false;
      if (Distance != other.Distance) return false;
      if (Id != other.Id) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (face_ != null) hash ^= Face.GetHashCode();
      if (Speaking != false) hash ^= Speaking.GetHashCode();
      if (Looking != false) hash ^= Looking.GetHashCode();
      if (Distance != 0F) hash ^= Distance.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (face_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Face);
      }
      if (Speaking != false) {
        output.WriteRawTag(16);
        output.WriteBool(Speaking);
      }
      if (Looking != false) {
        output.WriteRawTag(24);
        output.WriteBool(Looking);
      }
      if (Distance != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Distance);
      }
      if (Id != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (face_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Face);
      }
      if (Speaking != false) {
        size += 1 + 1;
      }
      if (Looking != false) {
        size += 1 + 1;
      }
      if (Distance != 0F) {
        size += 1 + 4;
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    public void MergeFrom(Person other) {
      if (other == null) {
        return;
      }
      if (other.face_ != null) {
        if (face_ == null) {
          face_ = new global::Kinectperson.Face();
        }
        Face.MergeFrom(other.Face);
      }
      if (other.Speaking != false) {
        Speaking = other.Speaking;
      }
      if (other.Looking != false) {
        Looking = other.Looking;
      }
      if (other.Distance != 0F) {
        Distance = other.Distance;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (face_ == null) {
              face_ = new global::Kinectperson.Face();
            }
            input.ReadMessage(face_);
            break;
          }
          case 16: {
            Speaking = input.ReadBool();
            break;
          }
          case 24: {
            Looking = input.ReadBool();
            break;
          }
          case 37: {
            Distance = input.ReadFloat();
            break;
          }
          case 40: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PersonStream : pb::IMessage<PersonStream> {
    private static readonly pb::MessageParser<PersonStream> _parser = new pb::MessageParser<PersonStream>(() => new PersonStream());
    public static pb::MessageParser<PersonStream> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectperson.KinectPersonReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PersonStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PersonStream(PersonStream other) : this() {
      status_ = other.status_;
      data_ = other.data_.Clone();
    }

    public PersonStream Clone() {
      return new PersonStream(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Kinectperson.Person> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::Kinectperson.Person.Parser);
    private readonly pbc::RepeatedField<global::Kinectperson.Person> data_ = new pbc::RepeatedField<global::Kinectperson.Person>();
    public pbc::RepeatedField<global::Kinectperson.Person> Data {
      get { return data_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PersonStream);
    }

    public bool Equals(PersonStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(PersonStream other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      data_.Add(other.data_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectperson.KinectPersonReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Response(Response other) : this() {
      status_ = other.status_;
    }

    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private bool status_;
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Status != false) hash ^= Status.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != false) {
        output.WriteRawTag(8);
        output.WriteBool(Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Status != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Text : pb::IMessage<Text> {
    private static readonly pb::MessageParser<Text> _parser = new pb::MessageParser<Text>(() => new Text());
    public static pb::MessageParser<Text> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectperson.KinectPersonReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Text() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Text(Text other) : this() {
      text_ = other.text_;
    }

    public Text Clone() {
      return new Text(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int Text_FieldNumber = 1;
    private string text_ = "";
    public string Text_ {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Text);
    }

    public bool Equals(Text other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text_ != other.Text_) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Text_.Length != 0) hash ^= Text_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Text_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text_);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Text_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text_);
      }
      return size;
    }

    public void MergeFrom(Text other) {
      if (other == null) {
        return;
      }
      if (other.Text_.Length != 0) {
        Text_ = other.Text_;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text_ = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
