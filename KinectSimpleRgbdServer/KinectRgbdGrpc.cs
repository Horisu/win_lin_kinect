// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_rgbd.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Kinectrgbd {
  public static class KinectRgbd
  {
    static readonly string __ServiceName = "kinectrgbd.KinectRgbd";

    static readonly Marshaller<global::Kinectrgbd.Point> __Marshaller_Point = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kinectrgbd.Point.Parser.ParseFrom);
    static readonly Marshaller<global::Kinectrgbd.Response> __Marshaller_Response = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kinectrgbd.Response.Parser.ParseFrom);

    static readonly Method<global::Kinectrgbd.Point, global::Kinectrgbd.Response> __Method_SendPoints = new Method<global::Kinectrgbd.Point, global::Kinectrgbd.Response>(
        MethodType.ClientStreaming,
        __ServiceName,
        "SendPoints",
        __Marshaller_Point,
        __Marshaller_Response);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Kinectrgbd.Proto.KinectRgbd.Descriptor.Services[0]; }
    }

    // client interface
    public interface IKinectRgbdClient
    {
      AsyncClientStreamingCall<global::Kinectrgbd.Point, global::Kinectrgbd.Response> SendPoints(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncClientStreamingCall<global::Kinectrgbd.Point, global::Kinectrgbd.Response> SendPoints(CallOptions options);
    }

    // server-side interface
    public interface IKinectRgbd
    {
      Task<global::Kinectrgbd.Response> SendPoints(IAsyncStreamReader<global::Kinectrgbd.Point> requestStream, ServerCallContext context);
    }

    // client stub
    public class KinectRgbdClient : ClientBase, IKinectRgbdClient
    {
      public KinectRgbdClient(Channel channel) : base(channel)
      {
      }
      public AsyncClientStreamingCall<global::Kinectrgbd.Point, global::Kinectrgbd.Response> SendPoints(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SendPoints, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncClientStreamingCall(call);
      }
      public AsyncClientStreamingCall<global::Kinectrgbd.Point, global::Kinectrgbd.Response> SendPoints(CallOptions options)
      {
        var call = CreateCall(__Method_SendPoints, options);
        return Calls.AsyncClientStreamingCall(call);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IKinectRgbd serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_SendPoints, serviceImpl.SendPoints).Build();
    }

    // creates a new client
    public static KinectRgbdClient NewClient(Channel channel)
    {
      return new KinectRgbdClient(channel);
    }

  }
}
#endregion
