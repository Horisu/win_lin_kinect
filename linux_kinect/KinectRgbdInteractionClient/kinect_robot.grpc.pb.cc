// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: kinect_robot.proto

#include "kinect_robot.pb.h"
#include "kinect_robot.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace kinectrobot {

static const char* KinectRobot_method_names[] = {
  "/kinectrobot.KinectRobot/SendSpeech",
  "/kinectrobot.KinectRobot/SetSTTBehavior",
  "/kinectrobot.KinectRobot/WebAgent",
};

std::unique_ptr< KinectRobot::Stub> KinectRobot::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< KinectRobot::Stub> stub(new KinectRobot::Stub(channel));
  return stub;
}

KinectRobot::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendSpeech_(KinectRobot_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSTTBehavior_(KinectRobot_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WebAgent_(KinectRobot_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KinectRobot::Stub::SendSpeech(::grpc::ClientContext* context, const ::kinectrobot::Speech& request, ::kinectrobot::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SendSpeech_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectrobot::Response>* KinectRobot::Stub::AsyncSendSpeechRaw(::grpc::ClientContext* context, const ::kinectrobot::Speech& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectrobot::Response>(channel_.get(), cq, rpcmethod_SendSpeech_, context, request);
}

::grpc::Status KinectRobot::Stub::SetSTTBehavior(::grpc::ClientContext* context, const ::kinectrobot::VoiceTriggers& request, ::kinectrobot::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetSTTBehavior_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectrobot::Response>* KinectRobot::Stub::AsyncSetSTTBehaviorRaw(::grpc::ClientContext* context, const ::kinectrobot::VoiceTriggers& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectrobot::Response>(channel_.get(), cq, rpcmethod_SetSTTBehavior_, context, request);
}

::grpc::Status KinectRobot::Stub::WebAgent(::grpc::ClientContext* context, const ::kinectrobot::UrlInfo& request, ::kinectrobot::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_WebAgent_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectrobot::Response>* KinectRobot::Stub::AsyncWebAgentRaw(::grpc::ClientContext* context, const ::kinectrobot::UrlInfo& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectrobot::Response>(channel_.get(), cq, rpcmethod_WebAgent_, context, request);
}

KinectRobot::Service::Service() {
  (void)KinectRobot_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectRobot_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectRobot::Service, ::kinectrobot::Speech, ::kinectrobot::Response>(
          std::mem_fn(&KinectRobot::Service::SendSpeech), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectRobot_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectRobot::Service, ::kinectrobot::VoiceTriggers, ::kinectrobot::Response>(
          std::mem_fn(&KinectRobot::Service::SetSTTBehavior), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectRobot_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectRobot::Service, ::kinectrobot::UrlInfo, ::kinectrobot::Response>(
          std::mem_fn(&KinectRobot::Service::WebAgent), this)));
}

KinectRobot::Service::~Service() {
}

::grpc::Status KinectRobot::Service::SendSpeech(::grpc::ServerContext* context, const ::kinectrobot::Speech* request, ::kinectrobot::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KinectRobot::Service::SetSTTBehavior(::grpc::ServerContext* context, const ::kinectrobot::VoiceTriggers* request, ::kinectrobot::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KinectRobot::Service::WebAgent(::grpc::ServerContext* context, const ::kinectrobot::UrlInfo* request, ::kinectrobot::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kinectrobot

