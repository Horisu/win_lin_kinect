// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_robot.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kinectrobot {

  /// <summary>Holder for reflection information generated from kinect_robot.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class KinectRobotReflection {

    #region Descriptor
    /// <summary>File descriptor for kinect_robot.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KinectRobotReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJraW5lY3Rfcm9ib3QucHJvdG8SC2tpbmVjdHJvYm90IkgKA0JpdBIJCgF4",
            "GAEgASgCEgkKAXkYAiABKAISDQoFd2lkdGgYAyABKAISDgoGaGVpZ2h0GAQg",
            "ASgCEgwKBG5hbWUYBSABKAkiNwoHUmVxdWVzdBIeCgRkYXRhGAEgAygLMhAu",
            "a2luZWN0cm9ib3QuQml0EgwKBGFyZ3MYAiABKAkiNwoFUG9pbnQSCQoBeBgB",
            "IAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAISDQoFY29sb3IYBCABKAUiOQoG",
            "UG9pbnRzEg0KBWRlbGF5GAEgASgIEiAKBGRhdGEYAiADKAsyEi5raW5lY3Ry",
            "b2JvdC5Qb2ludCImCgZQaXhlbHMSDQoFZGVsYXkYASABKAgSDQoFY29sb3IY",
            "AiADKAUiJgoDVGFnEgsKA3RhZxgBIAEoCRISCgpjb25maWRlbmNlGAIgASgC",
            "IooBCgREYXRhEgkKAXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMgASgCEiIK",
            "CGNhcHRpb25zGAQgAygLMhAua2luZWN0cm9ib3QuVGFnEh4KBHRhZ3MYBSAD",
            "KAsyEC5raW5lY3Ryb2JvdC5UYWcSDQoFdGV4dHMYBiADKAkSDgoGc3RhdHVz",
            "GAcgASgIIj0KCkRhdGFTdHJlYW0SDgoGc3RhdHVzGAEgASgIEh8KBGRhdGEY",
            "AiADKAsyES5raW5lY3Ryb2JvdC5EYXRhIjsKCUJpdFN0cmVhbRIOCgZzdGF0",
            "dXMYASABKAgSHgoEZGF0YRgCIAMoCzIQLmtpbmVjdHJvYm90LkJpdCIzCg5T",
            "dHJlYW1TZXR0aW5ncxIPCgdzdHJlYW1zGAEgAygJEhAKCHNldHRpbmdzGAIg",
            "AygIIikKBlNwZWVjaBIPCgdjb21tYW5kGAEgASgJEg4KBnNwZWVjaBgCIAEo",
            "CSKIAQoNVm9pY2VUcmlnZ2VycxIjChtBdXRvVHJpZ2dlckFmdGVyUmVjb2du",
            "aXRpb24YASABKAgSHwoXQXV0b1RyaWdnZXJEdXJpbmdTcGVlY2gYAiABKAgS",
            "FwoPTWFudWFsVHJpZ2dlck9uGAMgASgIEhgKEE1hbnVhbFRyaWdnZXJPZmYY",
            "BCABKAgiRAoHVXJsSW5mbxILCgN1cmwYASABKAkSEAoIbGlua2hlYWQYAiAB",
            "KAkSCwoDa2V5GAMgASgJEg0KBXN0eWxlGAQgASgJIhoKCFJlc3BvbnNlEg4K",
            "BnN0YXR1cxgBIAEoCDLtBAoLS2luZWN0Um9ib3QSQAoPVXBkYXRlVGltZVN0",
            "YW1wEhQua2luZWN0cm9ib3QuUmVxdWVzdBoVLmtpbmVjdHJvYm90LlJlc3Bv",
            "bnNlIgASPQoMUmV0dXJuUG9pbnRzEhQua2luZWN0cm9ib3QuUmVxdWVzdBoT",
            "LmtpbmVjdHJvYm90LlBvaW50cyIAMAESPAoLUmV0dXJuSW1hZ2USFC5raW5l",
            "Y3Ryb2JvdC5SZXF1ZXN0GhMua2luZWN0cm9ib3QuUGl4ZWxzIgAwARJSCiBS",
            "ZXR1cm5QaXhlbEJvdW5kc0Zyb21TcGFjZUJvdW5kcxIULmtpbmVjdHJvYm90",
            "LlJlcXVlc3QaFi5raW5lY3Ryb2JvdC5CaXRTdHJlYW0iABJCCg9SZXR1cm5D",
            "b2duaXRpb24SFC5raW5lY3Ryb2JvdC5SZXF1ZXN0Ghcua2luZWN0cm9ib3Qu",
            "RGF0YVN0cmVhbSIAEkkKEVNldFN0cmVhbVNldHRpbmdzEhsua2luZWN0cm9i",
            "b3QuU3RyZWFtU2V0dGluZ3MaFS5raW5lY3Ryb2JvdC5SZXNwb25zZSIAEjoK",
            "ClNlbmRTcGVlY2gSEy5raW5lY3Ryb2JvdC5TcGVlY2gaFS5raW5lY3Ryb2Jv",
            "dC5SZXNwb25zZSIAEkUKDlNldFNUVEJlaGF2aW9yEhoua2luZWN0cm9ib3Qu",
            "Vm9pY2VUcmlnZ2VycxoVLmtpbmVjdHJvYm90LlJlc3BvbnNlIgASOQoIV2Vi",
            "QWdlbnQSFC5raW5lY3Ryb2JvdC5VcmxJbmZvGhUua2luZWN0cm9ib3QuUmVz",
            "cG9uc2UiAEIPCgdleC5ncnBjogIDUlRHYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.Bit), global::Kinectrobot.Bit.Parser, new[]{ "X", "Y", "Width", "Height", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.Request), global::Kinectrobot.Request.Parser, new[]{ "Data", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.Point), global::Kinectrobot.Point.Parser, new[]{ "X", "Y", "Z", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.Points), global::Kinectrobot.Points.Parser, new[]{ "Delay", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.Pixels), global::Kinectrobot.Pixels.Parser, new[]{ "Delay", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.Tag), global::Kinectrobot.Tag.Parser, new[]{ "Tag_", "Confidence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.Data), global::Kinectrobot.Data.Parser, new[]{ "X", "Y", "Z", "Captions", "Tags", "Texts", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.DataStream), global::Kinectrobot.DataStream.Parser, new[]{ "Status", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.BitStream), global::Kinectrobot.BitStream.Parser, new[]{ "Status", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.StreamSettings), global::Kinectrobot.StreamSettings.Parser, new[]{ "Streams", "Settings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.Speech), global::Kinectrobot.Speech.Parser, new[]{ "Command", "Speech_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.VoiceTriggers), global::Kinectrobot.VoiceTriggers.Parser, new[]{ "AutoTriggerAfterRecognition", "AutoTriggerDuringSpeech", "ManualTriggerOn", "ManualTriggerOff" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.UrlInfo), global::Kinectrobot.UrlInfo.Parser, new[]{ "Url", "Linkhead", "Key", "Style" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrobot.Response), global::Kinectrobot.Response.Parser, new[]{ "Status" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Bit : pb::IMessage<Bit> {
    private static readonly pb::MessageParser<Bit> _parser = new pb::MessageParser<Bit>(() => new Bit());
    public static pb::MessageParser<Bit> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Bit() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Bit(Bit other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      width_ = other.width_;
      height_ = other.height_;
      name_ = other.name_;
    }

    public Bit Clone() {
      return new Bit(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private float width_;
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private float height_;
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Bit);
    }

    public bool Equals(Bit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Name != other.Name) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Width != 0F) hash ^= Width.GetHashCode();
      if (Height != 0F) hash ^= Height.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Width != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Width);
      }
      if (Height != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Height);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(Bit other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Width = input.ReadFloat();
            break;
          }
          case 37: {
            Height = input.ReadFloat();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Request(Request other) : this() {
      data_ = other.data_.Clone();
      args_ = other.args_;
    }

    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Kinectrobot.Bit> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::Kinectrobot.Bit.Parser);
    private readonly pbc::RepeatedField<global::Kinectrobot.Bit> data_ = new pbc::RepeatedField<global::Kinectrobot.Bit>();
    public pbc::RepeatedField<global::Kinectrobot.Bit> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 2;
    private string args_ = "";
    public string Args {
      get { return args_; }
      set {
        args_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      if (Args != other.Args) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (Args.Length != 0) hash ^= Args.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (Args.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Args);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (Args.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Args);
      }
      return size;
    }

    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      if (other.Args.Length != 0) {
        Args = other.Args;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 18: {
            Args = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Point(Point other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      color_ = other.color_;
    }

    public Point Clone() {
      return new Point(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 4;
    private int color_;
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Color != other.Color) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (Color != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Color);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      return size;
    }

    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 32: {
            Color = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Points : pb::IMessage<Points> {
    private static readonly pb::MessageParser<Points> _parser = new pb::MessageParser<Points>(() => new Points());
    public static pb::MessageParser<Points> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Points() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Points(Points other) : this() {
      delay_ = other.delay_;
      data_ = other.data_.Clone();
    }

    public Points Clone() {
      return new Points(this);
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 1;
    private bool delay_;
    public bool Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Kinectrobot.Point> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::Kinectrobot.Point.Parser);
    private readonly pbc::RepeatedField<global::Kinectrobot.Point> data_ = new pbc::RepeatedField<global::Kinectrobot.Point>();
    public pbc::RepeatedField<global::Kinectrobot.Point> Data {
      get { return data_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Points);
    }

    public bool Equals(Points other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Delay != other.Delay) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Delay != false) hash ^= Delay.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Delay != false) {
        output.WriteRawTag(8);
        output.WriteBool(Delay);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Delay != false) {
        size += 1 + 1;
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(Points other) {
      if (other == null) {
        return;
      }
      if (other.Delay != false) {
        Delay = other.Delay;
      }
      data_.Add(other.data_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Delay = input.ReadBool();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Pixels : pb::IMessage<Pixels> {
    private static readonly pb::MessageParser<Pixels> _parser = new pb::MessageParser<Pixels>(() => new Pixels());
    public static pb::MessageParser<Pixels> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Pixels() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Pixels(Pixels other) : this() {
      delay_ = other.delay_;
      color_ = other.color_.Clone();
    }

    public Pixels Clone() {
      return new Pixels(this);
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 1;
    private bool delay_;
    public bool Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_color_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> color_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Color {
      get { return color_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Pixels);
    }

    public bool Equals(Pixels other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Delay != other.Delay) return false;
      if(!color_.Equals(other.color_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Delay != false) hash ^= Delay.GetHashCode();
      hash ^= color_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Delay != false) {
        output.WriteRawTag(8);
        output.WriteBool(Delay);
      }
      color_.WriteTo(output, _repeated_color_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Delay != false) {
        size += 1 + 1;
      }
      size += color_.CalculateSize(_repeated_color_codec);
      return size;
    }

    public void MergeFrom(Pixels other) {
      if (other == null) {
        return;
      }
      if (other.Delay != false) {
        Delay = other.Delay;
      }
      color_.Add(other.color_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Delay = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            color_.AddEntriesFrom(input, _repeated_color_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Tag : pb::IMessage<Tag> {
    private static readonly pb::MessageParser<Tag> _parser = new pb::MessageParser<Tag>(() => new Tag());
    public static pb::MessageParser<Tag> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Tag() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Tag(Tag other) : this() {
      tag_ = other.tag_;
      confidence_ = other.confidence_;
    }

    public Tag Clone() {
      return new Tag(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int Tag_FieldNumber = 1;
    private string tag_ = "";
    public string Tag_ {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 2;
    private float confidence_;
    public float Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Tag);
    }

    public bool Equals(Tag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag_ != other.Tag_) return false;
      if (Confidence != other.Confidence) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Tag_.Length != 0) hash ^= Tag_.GetHashCode();
      if (Confidence != 0F) hash ^= Confidence.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag_);
      }
      if (Confidence != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Confidence);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Tag_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag_);
      }
      if (Confidence != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Tag other) {
      if (other == null) {
        return;
      }
      if (other.Tag_.Length != 0) {
        Tag_ = other.Tag_;
      }
      if (other.Confidence != 0F) {
        Confidence = other.Confidence;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Tag_ = input.ReadString();
            break;
          }
          case 21: {
            Confidence = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Data : pb::IMessage<Data> {
    private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
    public static pb::MessageParser<Data> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Data(Data other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      captions_ = other.captions_.Clone();
      tags_ = other.tags_.Clone();
      texts_ = other.texts_.Clone();
      status_ = other.status_;
    }

    public Data Clone() {
      return new Data(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "captions" field.</summary>
    public const int CaptionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Kinectrobot.Tag> _repeated_captions_codec
        = pb::FieldCodec.ForMessage(34, global::Kinectrobot.Tag.Parser);
    private readonly pbc::RepeatedField<global::Kinectrobot.Tag> captions_ = new pbc::RepeatedField<global::Kinectrobot.Tag>();
    public pbc::RepeatedField<global::Kinectrobot.Tag> Captions {
      get { return captions_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Kinectrobot.Tag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(42, global::Kinectrobot.Tag.Parser);
    private readonly pbc::RepeatedField<global::Kinectrobot.Tag> tags_ = new pbc::RepeatedField<global::Kinectrobot.Tag>();
    public pbc::RepeatedField<global::Kinectrobot.Tag> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "texts" field.</summary>
    public const int TextsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_texts_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> texts_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Texts {
      get { return texts_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private bool status_;
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Data);
    }

    public bool Equals(Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if(!captions_.Equals(other.captions_)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if(!texts_.Equals(other.texts_)) return false;
      if (Status != other.Status) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      hash ^= captions_.GetHashCode();
      hash ^= tags_.GetHashCode();
      hash ^= texts_.GetHashCode();
      if (Status != false) hash ^= Status.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      captions_.WriteTo(output, _repeated_captions_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
      texts_.WriteTo(output, _repeated_texts_codec);
      if (Status != false) {
        output.WriteRawTag(56);
        output.WriteBool(Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      size += captions_.CalculateSize(_repeated_captions_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += texts_.CalculateSize(_repeated_texts_codec);
      if (Status != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Data other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      captions_.Add(other.captions_);
      tags_.Add(other.tags_);
      texts_.Add(other.texts_);
      if (other.Status != false) {
        Status = other.Status;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 34: {
            captions_.AddEntriesFrom(input, _repeated_captions_codec);
            break;
          }
          case 42: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 50: {
            texts_.AddEntriesFrom(input, _repeated_texts_codec);
            break;
          }
          case 56: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DataStream : pb::IMessage<DataStream> {
    private static readonly pb::MessageParser<DataStream> _parser = new pb::MessageParser<DataStream>(() => new DataStream());
    public static pb::MessageParser<DataStream> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DataStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DataStream(DataStream other) : this() {
      status_ = other.status_;
      data_ = other.data_.Clone();
    }

    public DataStream Clone() {
      return new DataStream(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private bool status_;
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Kinectrobot.Data> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::Kinectrobot.Data.Parser);
    private readonly pbc::RepeatedField<global::Kinectrobot.Data> data_ = new pbc::RepeatedField<global::Kinectrobot.Data>();
    public pbc::RepeatedField<global::Kinectrobot.Data> Data {
      get { return data_; }
    }

    public override bool Equals(object other) {
      return Equals(other as DataStream);
    }

    public bool Equals(DataStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Status != false) hash ^= Status.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != false) {
        output.WriteRawTag(8);
        output.WriteBool(Status);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Status != false) {
        size += 1 + 1;
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(DataStream other) {
      if (other == null) {
        return;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
      data_.Add(other.data_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadBool();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BitStream : pb::IMessage<BitStream> {
    private static readonly pb::MessageParser<BitStream> _parser = new pb::MessageParser<BitStream>(() => new BitStream());
    public static pb::MessageParser<BitStream> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BitStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BitStream(BitStream other) : this() {
      status_ = other.status_;
      data_ = other.data_.Clone();
    }

    public BitStream Clone() {
      return new BitStream(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private bool status_;
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Kinectrobot.Bit> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::Kinectrobot.Bit.Parser);
    private readonly pbc::RepeatedField<global::Kinectrobot.Bit> data_ = new pbc::RepeatedField<global::Kinectrobot.Bit>();
    public pbc::RepeatedField<global::Kinectrobot.Bit> Data {
      get { return data_; }
    }

    public override bool Equals(object other) {
      return Equals(other as BitStream);
    }

    public bool Equals(BitStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Status != false) hash ^= Status.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != false) {
        output.WriteRawTag(8);
        output.WriteBool(Status);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Status != false) {
        size += 1 + 1;
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(BitStream other) {
      if (other == null) {
        return;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
      data_.Add(other.data_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadBool();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StreamSettings : pb::IMessage<StreamSettings> {
    private static readonly pb::MessageParser<StreamSettings> _parser = new pb::MessageParser<StreamSettings>(() => new StreamSettings());
    public static pb::MessageParser<StreamSettings> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public StreamSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    public StreamSettings(StreamSettings other) : this() {
      streams_ = other.streams_.Clone();
      settings_ = other.settings_.Clone();
    }

    public StreamSettings Clone() {
      return new StreamSettings(this);
    }

    /// <summary>Field number for the "streams" field.</summary>
    public const int StreamsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_streams_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> streams_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Streams {
      get { return streams_; }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 2;
    private static readonly pb::FieldCodec<bool> _repeated_settings_codec
        = pb::FieldCodec.ForBool(18);
    private readonly pbc::RepeatedField<bool> settings_ = new pbc::RepeatedField<bool>();
    public pbc::RepeatedField<bool> Settings {
      get { return settings_; }
    }

    public override bool Equals(object other) {
      return Equals(other as StreamSettings);
    }

    public bool Equals(StreamSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!streams_.Equals(other.streams_)) return false;
      if(!settings_.Equals(other.settings_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= streams_.GetHashCode();
      hash ^= settings_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      streams_.WriteTo(output, _repeated_streams_codec);
      settings_.WriteTo(output, _repeated_settings_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += streams_.CalculateSize(_repeated_streams_codec);
      size += settings_.CalculateSize(_repeated_settings_codec);
      return size;
    }

    public void MergeFrom(StreamSettings other) {
      if (other == null) {
        return;
      }
      streams_.Add(other.streams_);
      settings_.Add(other.settings_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            streams_.AddEntriesFrom(input, _repeated_streams_codec);
            break;
          }
          case 18:
          case 16: {
            settings_.AddEntriesFrom(input, _repeated_settings_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Speech : pb::IMessage<Speech> {
    private static readonly pb::MessageParser<Speech> _parser = new pb::MessageParser<Speech>(() => new Speech());
    public static pb::MessageParser<Speech> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Speech() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Speech(Speech other) : this() {
      command_ = other.command_;
      speech_ = other.speech_;
    }

    public Speech Clone() {
      return new Speech(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private string command_ = "";
    public string Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "speech" field.</summary>
    public const int Speech_FieldNumber = 2;
    private string speech_ = "";
    public string Speech_ {
      get { return speech_; }
      set {
        speech_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Speech);
    }

    public bool Equals(Speech other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (Speech_ != other.Speech_) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      if (Speech_.Length != 0) hash ^= Speech_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Command.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Command);
      }
      if (Speech_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Speech_);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
      }
      if (Speech_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Speech_);
      }
      return size;
    }

    public void MergeFrom(Speech other) {
      if (other == null) {
        return;
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
      if (other.Speech_.Length != 0) {
        Speech_ = other.Speech_;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Command = input.ReadString();
            break;
          }
          case 18: {
            Speech_ = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VoiceTriggers : pb::IMessage<VoiceTriggers> {
    private static readonly pb::MessageParser<VoiceTriggers> _parser = new pb::MessageParser<VoiceTriggers>(() => new VoiceTriggers());
    public static pb::MessageParser<VoiceTriggers> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public VoiceTriggers() {
      OnConstruction();
    }

    partial void OnConstruction();

    public VoiceTriggers(VoiceTriggers other) : this() {
      autoTriggerAfterRecognition_ = other.autoTriggerAfterRecognition_;
      autoTriggerDuringSpeech_ = other.autoTriggerDuringSpeech_;
      manualTriggerOn_ = other.manualTriggerOn_;
      manualTriggerOff_ = other.manualTriggerOff_;
    }

    public VoiceTriggers Clone() {
      return new VoiceTriggers(this);
    }

    /// <summary>Field number for the "AutoTriggerAfterRecognition" field.</summary>
    public const int AutoTriggerAfterRecognitionFieldNumber = 1;
    private bool autoTriggerAfterRecognition_;
    public bool AutoTriggerAfterRecognition {
      get { return autoTriggerAfterRecognition_; }
      set {
        autoTriggerAfterRecognition_ = value;
      }
    }

    /// <summary>Field number for the "AutoTriggerDuringSpeech" field.</summary>
    public const int AutoTriggerDuringSpeechFieldNumber = 2;
    private bool autoTriggerDuringSpeech_;
    public bool AutoTriggerDuringSpeech {
      get { return autoTriggerDuringSpeech_; }
      set {
        autoTriggerDuringSpeech_ = value;
      }
    }

    /// <summary>Field number for the "ManualTriggerOn" field.</summary>
    public const int ManualTriggerOnFieldNumber = 3;
    private bool manualTriggerOn_;
    public bool ManualTriggerOn {
      get { return manualTriggerOn_; }
      set {
        manualTriggerOn_ = value;
      }
    }

    /// <summary>Field number for the "ManualTriggerOff" field.</summary>
    public const int ManualTriggerOffFieldNumber = 4;
    private bool manualTriggerOff_;
    public bool ManualTriggerOff {
      get { return manualTriggerOff_; }
      set {
        manualTriggerOff_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as VoiceTriggers);
    }

    public bool Equals(VoiceTriggers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutoTriggerAfterRecognition != other.AutoTriggerAfterRecognition) return false;
      if (AutoTriggerDuringSpeech != other.AutoTriggerDuringSpeech) return false;
      if (ManualTriggerOn != other.ManualTriggerOn) return false;
      if (ManualTriggerOff != other.ManualTriggerOff) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AutoTriggerAfterRecognition != false) hash ^= AutoTriggerAfterRecognition.GetHashCode();
      if (AutoTriggerDuringSpeech != false) hash ^= AutoTriggerDuringSpeech.GetHashCode();
      if (ManualTriggerOn != false) hash ^= ManualTriggerOn.GetHashCode();
      if (ManualTriggerOff != false) hash ^= ManualTriggerOff.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoTriggerAfterRecognition != false) {
        output.WriteRawTag(8);
        output.WriteBool(AutoTriggerAfterRecognition);
      }
      if (AutoTriggerDuringSpeech != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoTriggerDuringSpeech);
      }
      if (ManualTriggerOn != false) {
        output.WriteRawTag(24);
        output.WriteBool(ManualTriggerOn);
      }
      if (ManualTriggerOff != false) {
        output.WriteRawTag(32);
        output.WriteBool(ManualTriggerOff);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AutoTriggerAfterRecognition != false) {
        size += 1 + 1;
      }
      if (AutoTriggerDuringSpeech != false) {
        size += 1 + 1;
      }
      if (ManualTriggerOn != false) {
        size += 1 + 1;
      }
      if (ManualTriggerOff != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(VoiceTriggers other) {
      if (other == null) {
        return;
      }
      if (other.AutoTriggerAfterRecognition != false) {
        AutoTriggerAfterRecognition = other.AutoTriggerAfterRecognition;
      }
      if (other.AutoTriggerDuringSpeech != false) {
        AutoTriggerDuringSpeech = other.AutoTriggerDuringSpeech;
      }
      if (other.ManualTriggerOn != false) {
        ManualTriggerOn = other.ManualTriggerOn;
      }
      if (other.ManualTriggerOff != false) {
        ManualTriggerOff = other.ManualTriggerOff;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AutoTriggerAfterRecognition = input.ReadBool();
            break;
          }
          case 16: {
            AutoTriggerDuringSpeech = input.ReadBool();
            break;
          }
          case 24: {
            ManualTriggerOn = input.ReadBool();
            break;
          }
          case 32: {
            ManualTriggerOff = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UrlInfo : pb::IMessage<UrlInfo> {
    private static readonly pb::MessageParser<UrlInfo> _parser = new pb::MessageParser<UrlInfo>(() => new UrlInfo());
    public static pb::MessageParser<UrlInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UrlInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UrlInfo(UrlInfo other) : this() {
      url_ = other.url_;
      linkhead_ = other.linkhead_;
      key_ = other.key_;
      style_ = other.style_;
    }

    public UrlInfo Clone() {
      return new UrlInfo(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "linkhead" field.</summary>
    public const int LinkheadFieldNumber = 2;
    private string linkhead_ = "";
    public string Linkhead {
      get { return linkhead_; }
      set {
        linkhead_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private string key_ = "";
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 4;
    private string style_ = "";
    public string Style {
      get { return style_; }
      set {
        style_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UrlInfo);
    }

    public bool Equals(UrlInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (Linkhead != other.Linkhead) return false;
      if (Key != other.Key) return false;
      if (Style != other.Style) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Linkhead.Length != 0) hash ^= Linkhead.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Style.Length != 0) hash ^= Style.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (Linkhead.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Linkhead);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Key);
      }
      if (Style.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Style);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Linkhead.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Linkhead);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Style.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Style);
      }
      return size;
    }

    public void MergeFrom(UrlInfo other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Linkhead.Length != 0) {
        Linkhead = other.Linkhead;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Style.Length != 0) {
        Style = other.Style;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 18: {
            Linkhead = input.ReadString();
            break;
          }
          case 26: {
            Key = input.ReadString();
            break;
          }
          case 34: {
            Style = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrobot.KinectRobotReflection.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Response(Response other) : this() {
      status_ = other.status_;
    }

    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private bool status_;
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Status != false) hash ^= Status.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != false) {
        output.WriteRawTag(8);
        output.WriteBool(Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Status != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
