// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_rgbd.proto

#ifndef PROTOBUF_kinect_5frgbd_2eproto__INCLUDED
#define PROTOBUF_kinect_5frgbd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace kinectrgbd {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_kinect_5frgbd_2eproto();
void protobuf_AssignDesc_kinect_5frgbd_2eproto();
void protobuf_ShutdownFile_kinect_5frgbd_2eproto();

class Bit;
class BitStream;
class Data;
class DataStream;
class Header;
class Pixels;
class Point;
class Points;
class Request;
class Response;
class Tag;

// ===================================================================

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  inline Header* New() const { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  bool data() const;
  void set_data(bool value);

  // @@protoc_insertion_point(class_scope:kinectrgbd.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_kinect_5frgbd_2eproto();
  friend void protobuf_AssignDesc_kinect_5frgbd_2eproto();
  friend void protobuf_ShutdownFile_kinect_5frgbd_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class Bit : public ::google::protobuf::Message {
 public:
  Bit();
  virtual ~Bit();

  Bit(const Bit& from);

  inline Bit& operator=(const Bit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bit& default_instance();

  void Swap(Bit* other);

  // implements Message ----------------------------------------------

  inline Bit* New() const { return New(NULL); }

  Bit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bit& from);
  void MergeFrom(const Bit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Bit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  float width() const;
  void set_width(float value);

  // optional float height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  float height() const;
  void set_height(float value);

  // optional string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:kinectrgbd.Bit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  float width_;
  float height_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_kinect_5frgbd_2eproto();
  friend void protobuf_AssignDesc_kinect_5frgbd_2eproto();
  friend void protobuf_ShutdownFile_kinect_5frgbd_2eproto();

  void InitAsDefaultInstance();
  static Bit* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::google::protobuf::int32 mode() const;
  void set_mode(::google::protobuf::int32 value);

  // repeated .kinectrgbd.Bit data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::kinectrgbd::Bit& data(int index) const;
  ::kinectrgbd::Bit* mutable_data(int index);
  ::kinectrgbd::Bit* add_data();
  ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit >&
      data() const;

  // optional bool once = 3;
  void clear_once();
  static const int kOnceFieldNumber = 3;
  bool once() const;
  void set_once(bool value);

  // optional string args = 4;
  void clear_args();
  static const int kArgsFieldNumber = 4;
  const ::std::string& args() const;
  void set_args(const ::std::string& value);
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  ::std::string* mutable_args();
  ::std::string* release_args();
  void set_allocated_args(::std::string* args);

  // @@protoc_insertion_point(class_scope:kinectrgbd.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit > data_;
  ::google::protobuf::int32 mode_;
  bool once_;
  ::google::protobuf::internal::ArenaStringPtr args_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_kinect_5frgbd_2eproto();
  friend void protobuf_AssignDesc_kinect_5frgbd_2eproto();
  friend void protobuf_ShutdownFile_kinect_5frgbd_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool finish = 1;
  void clear_finish();
  static const int kFinishFieldNumber = 1;
  bool finish() const;
  void set_finish(bool value);

  // @@protoc_insertion_point(class_scope:kinectrgbd.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool finish_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_kinect_5frgbd_2eproto();
  friend void protobuf_AssignDesc_kinect_5frgbd_2eproto();
  friend void protobuf_ShutdownFile_kinect_5frgbd_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class Pixels : public ::google::protobuf::Message {
 public:
  Pixels();
  virtual ~Pixels();

  Pixels(const Pixels& from);

  inline Pixels& operator=(const Pixels& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pixels& default_instance();

  void Swap(Pixels* other);

  // implements Message ----------------------------------------------

  inline Pixels* New() const { return New(NULL); }

  Pixels* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pixels& from);
  void MergeFrom(const Pixels& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pixels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 color = 1;
  int color_size() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  ::google::protobuf::int32 color(int index) const;
  void set_color(int index, ::google::protobuf::int32 value);
  void add_color(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      color() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_color();

  // @@protoc_insertion_point(class_scope:kinectrgbd.Pixels)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > color_;
  mutable int _color_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_kinect_5frgbd_2eproto();
  friend void protobuf_AssignDesc_kinect_5frgbd_2eproto();
  friend void protobuf_ShutdownFile_kinect_5frgbd_2eproto();

  void InitAsDefaultInstance();
  static Pixels* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  inline Point* New() const { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // optional int32 color = 4;
  void clear_color();
  static const int kColorFieldNumber = 4;
  ::google::protobuf::int32 color() const;
  void set_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kinectrgbd.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  float z_;
  ::google::protobuf::int32 color_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_kinect_5frgbd_2eproto();
  friend void protobuf_AssignDesc_kinect_5frgbd_2eproto();
  friend void protobuf_ShutdownFile_kinect_5frgbd_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Points : public ::google::protobuf::Message {
 public:
  Points();
  virtual ~Points();

  Points(const Points& from);

  inline Points& operator=(const Points& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Points& default_instance();

  void Swap(Points* other);

  // implements Message ----------------------------------------------

  inline Points* New() const { return New(NULL); }

  Points* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Points& from);
  void MergeFrom(const Points& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Points* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .kinectrgbd.Point data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::kinectrgbd::Point& data(int index) const;
  ::kinectrgbd::Point* mutable_data(int index);
  ::kinectrgbd::Point* add_data();
  ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Point >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Point >&
      data() const;

  // @@protoc_insertion_point(class_scope:kinectrgbd.Points)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Point > data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_kinect_5frgbd_2eproto();
  friend void protobuf_AssignDesc_kinect_5frgbd_2eproto();
  friend void protobuf_ShutdownFile_kinect_5frgbd_2eproto();

  void InitAsDefaultInstance();
  static Points* default_instance_;
};
// -------------------------------------------------------------------

class Tag : public ::google::protobuf::Message {
 public:
  Tag();
  virtual ~Tag();

  Tag(const Tag& from);

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tag& default_instance();

  void Swap(Tag* other);

  // implements Message ----------------------------------------------

  inline Tag* New() const { return New(NULL); }

  Tag* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tag = 1;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional float confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:kinectrgbd.Tag)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_kinect_5frgbd_2eproto();
  friend void protobuf_AssignDesc_kinect_5frgbd_2eproto();
  friend void protobuf_ShutdownFile_kinect_5frgbd_2eproto();

  void InitAsDefaultInstance();
  static Tag* default_instance_;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  inline Data* New() const { return New(NULL); }

  Data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // repeated .kinectrgbd.Tag captions = 4;
  int captions_size() const;
  void clear_captions();
  static const int kCaptionsFieldNumber = 4;
  const ::kinectrgbd::Tag& captions(int index) const;
  ::kinectrgbd::Tag* mutable_captions(int index);
  ::kinectrgbd::Tag* add_captions();
  ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag >*
      mutable_captions();
  const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag >&
      captions() const;

  // repeated .kinectrgbd.Tag tags = 5;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 5;
  const ::kinectrgbd::Tag& tags(int index) const;
  ::kinectrgbd::Tag* mutable_tags(int index);
  ::kinectrgbd::Tag* add_tags();
  ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag >*
      mutable_tags();
  const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag >&
      tags() const;

  // repeated string texts = 6;
  int texts_size() const;
  void clear_texts();
  static const int kTextsFieldNumber = 6;
  const ::std::string& texts(int index) const;
  ::std::string* mutable_texts(int index);
  void set_texts(int index, const ::std::string& value);
  void set_texts(int index, const char* value);
  void set_texts(int index, const char* value, size_t size);
  ::std::string* add_texts();
  void add_texts(const ::std::string& value);
  void add_texts(const char* value);
  void add_texts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& texts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_texts();

  // optional bool status = 7;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:kinectrgbd.Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag > captions_;
  ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag > tags_;
  float z_;
  bool status_;
  ::google::protobuf::RepeatedPtrField< ::std::string> texts_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_kinect_5frgbd_2eproto();
  friend void protobuf_AssignDesc_kinect_5frgbd_2eproto();
  friend void protobuf_ShutdownFile_kinect_5frgbd_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class DataStream : public ::google::protobuf::Message {
 public:
  DataStream();
  virtual ~DataStream();

  DataStream(const DataStream& from);

  inline DataStream& operator=(const DataStream& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataStream& default_instance();

  void Swap(DataStream* other);

  // implements Message ----------------------------------------------

  inline DataStream* New() const { return New(NULL); }

  DataStream* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataStream& from);
  void MergeFrom(const DataStream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // repeated .kinectrgbd.Data data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::kinectrgbd::Data& data(int index) const;
  ::kinectrgbd::Data* mutable_data(int index);
  ::kinectrgbd::Data* add_data();
  ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Data >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Data >&
      data() const;

  // @@protoc_insertion_point(class_scope:kinectrgbd.DataStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Data > data_;
  bool status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_kinect_5frgbd_2eproto();
  friend void protobuf_AssignDesc_kinect_5frgbd_2eproto();
  friend void protobuf_ShutdownFile_kinect_5frgbd_2eproto();

  void InitAsDefaultInstance();
  static DataStream* default_instance_;
};
// -------------------------------------------------------------------

class BitStream : public ::google::protobuf::Message {
 public:
  BitStream();
  virtual ~BitStream();

  BitStream(const BitStream& from);

  inline BitStream& operator=(const BitStream& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitStream& default_instance();

  void Swap(BitStream* other);

  // implements Message ----------------------------------------------

  inline BitStream* New() const { return New(NULL); }

  BitStream* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitStream& from);
  void MergeFrom(const BitStream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BitStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // repeated .kinectrgbd.Bit data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::kinectrgbd::Bit& data(int index) const;
  ::kinectrgbd::Bit* mutable_data(int index);
  ::kinectrgbd::Bit* add_data();
  ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit >&
      data() const;

  // @@protoc_insertion_point(class_scope:kinectrgbd.BitStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit > data_;
  bool status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_kinect_5frgbd_2eproto();
  friend void protobuf_AssignDesc_kinect_5frgbd_2eproto();
  friend void protobuf_ShutdownFile_kinect_5frgbd_2eproto();

  void InitAsDefaultInstance();
  static BitStream* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// optional bool data = 1;
inline void Header::clear_data() {
  data_ = false;
}
inline bool Header::data() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Header.data)
  return data_;
}
inline void Header::set_data(bool value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Header.data)
}

// -------------------------------------------------------------------

// Bit

// optional float x = 1;
inline void Bit::clear_x() {
  x_ = 0;
}
inline float Bit::x() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Bit.x)
  return x_;
}
inline void Bit::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Bit.x)
}

// optional float y = 2;
inline void Bit::clear_y() {
  y_ = 0;
}
inline float Bit::y() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Bit.y)
  return y_;
}
inline void Bit::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Bit.y)
}

// optional float width = 3;
inline void Bit::clear_width() {
  width_ = 0;
}
inline float Bit::width() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Bit.width)
  return width_;
}
inline void Bit::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Bit.width)
}

// optional float height = 4;
inline void Bit::clear_height() {
  height_ = 0;
}
inline float Bit::height() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Bit.height)
  return height_;
}
inline void Bit::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Bit.height)
}

// optional string name = 5;
inline void Bit::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bit::name() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Bit.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bit::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kinectrgbd.Bit.name)
}
inline void Bit::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kinectrgbd.Bit.name)
}
inline void Bit::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kinectrgbd.Bit.name)
}
inline ::std::string* Bit::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Bit.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bit::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bit::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:kinectrgbd.Bit.name)
}

// -------------------------------------------------------------------

// Request

// optional int32 mode = 1;
inline void Request::clear_mode() {
  mode_ = 0;
}
inline ::google::protobuf::int32 Request::mode() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Request.mode)
  return mode_;
}
inline void Request::set_mode(::google::protobuf::int32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Request.mode)
}

// repeated .kinectrgbd.Bit data = 2;
inline int Request::data_size() const {
  return data_.size();
}
inline void Request::clear_data() {
  data_.Clear();
}
inline const ::kinectrgbd::Bit& Request::data(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Request.data)
  return data_.Get(index);
}
inline ::kinectrgbd::Bit* Request::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Request.data)
  return data_.Mutable(index);
}
inline ::kinectrgbd::Bit* Request::add_data() {
  // @@protoc_insertion_point(field_add:kinectrgbd.Request.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit >*
Request::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.Request.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit >&
Request::data() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.Request.data)
  return data_;
}

// optional bool once = 3;
inline void Request::clear_once() {
  once_ = false;
}
inline bool Request::once() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Request.once)
  return once_;
}
inline void Request::set_once(bool value) {
  
  once_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Request.once)
}

// optional string args = 4;
inline void Request::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::args() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Request.args)
  return args_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kinectrgbd.Request.args)
}
inline void Request::set_args(const char* value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kinectrgbd.Request.args)
}
inline void Request::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kinectrgbd.Request.args)
}
inline ::std::string* Request::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Request.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_args() {
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:kinectrgbd.Request.args)
}

// -------------------------------------------------------------------

// Response

// optional bool finish = 1;
inline void Response::clear_finish() {
  finish_ = false;
}
inline bool Response::finish() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Response.finish)
  return finish_;
}
inline void Response::set_finish(bool value) {
  
  finish_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Response.finish)
}

// -------------------------------------------------------------------

// Pixels

// repeated int32 color = 1;
inline int Pixels::color_size() const {
  return color_.size();
}
inline void Pixels::clear_color() {
  color_.Clear();
}
inline ::google::protobuf::int32 Pixels::color(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Pixels.color)
  return color_.Get(index);
}
inline void Pixels::set_color(int index, ::google::protobuf::int32 value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:kinectrgbd.Pixels.color)
}
inline void Pixels::add_color(::google::protobuf::int32 value) {
  color_.Add(value);
  // @@protoc_insertion_point(field_add:kinectrgbd.Pixels.color)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pixels::color() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.Pixels.color)
  return color_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pixels::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.Pixels.color)
  return &color_;
}

// -------------------------------------------------------------------

// Point

// optional float x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Point.x)
}

// optional float y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Point.y)
}

// optional float z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Point.z)
  return z_;
}
inline void Point::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Point.z)
}

// optional int32 color = 4;
inline void Point::clear_color() {
  color_ = 0;
}
inline ::google::protobuf::int32 Point::color() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Point.color)
  return color_;
}
inline void Point::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Point.color)
}

// -------------------------------------------------------------------

// Points

// repeated .kinectrgbd.Point data = 1;
inline int Points::data_size() const {
  return data_.size();
}
inline void Points::clear_data() {
  data_.Clear();
}
inline const ::kinectrgbd::Point& Points::data(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Points.data)
  return data_.Get(index);
}
inline ::kinectrgbd::Point* Points::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Points.data)
  return data_.Mutable(index);
}
inline ::kinectrgbd::Point* Points::add_data() {
  // @@protoc_insertion_point(field_add:kinectrgbd.Points.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Point >*
Points::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.Points.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Point >&
Points::data() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.Points.data)
  return data_;
}

// -------------------------------------------------------------------

// Tag

// optional string tag = 1;
inline void Tag::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tag::tag() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Tag.tag)
  return tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kinectrgbd.Tag.tag)
}
inline void Tag::set_tag(const char* value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kinectrgbd.Tag.tag)
}
inline void Tag::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kinectrgbd.Tag.tag)
}
inline ::std::string* Tag::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Tag.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tag::release_tag() {
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:kinectrgbd.Tag.tag)
}

// optional float confidence = 2;
inline void Tag::clear_confidence() {
  confidence_ = 0;
}
inline float Tag::confidence() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Tag.confidence)
  return confidence_;
}
inline void Tag::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Tag.confidence)
}

// -------------------------------------------------------------------

// Data

// optional float x = 1;
inline void Data::clear_x() {
  x_ = 0;
}
inline float Data::x() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.x)
  return x_;
}
inline void Data::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Data.x)
}

// optional float y = 2;
inline void Data::clear_y() {
  y_ = 0;
}
inline float Data::y() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.y)
  return y_;
}
inline void Data::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Data.y)
}

// optional float z = 3;
inline void Data::clear_z() {
  z_ = 0;
}
inline float Data::z() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.z)
  return z_;
}
inline void Data::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Data.z)
}

// repeated .kinectrgbd.Tag captions = 4;
inline int Data::captions_size() const {
  return captions_.size();
}
inline void Data::clear_captions() {
  captions_.Clear();
}
inline const ::kinectrgbd::Tag& Data::captions(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.captions)
  return captions_.Get(index);
}
inline ::kinectrgbd::Tag* Data::mutable_captions(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Data.captions)
  return captions_.Mutable(index);
}
inline ::kinectrgbd::Tag* Data::add_captions() {
  // @@protoc_insertion_point(field_add:kinectrgbd.Data.captions)
  return captions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag >*
Data::mutable_captions() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.Data.captions)
  return &captions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag >&
Data::captions() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.Data.captions)
  return captions_;
}

// repeated .kinectrgbd.Tag tags = 5;
inline int Data::tags_size() const {
  return tags_.size();
}
inline void Data::clear_tags() {
  tags_.Clear();
}
inline const ::kinectrgbd::Tag& Data::tags(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.tags)
  return tags_.Get(index);
}
inline ::kinectrgbd::Tag* Data::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Data.tags)
  return tags_.Mutable(index);
}
inline ::kinectrgbd::Tag* Data::add_tags() {
  // @@protoc_insertion_point(field_add:kinectrgbd.Data.tags)
  return tags_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag >*
Data::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.Data.tags)
  return &tags_;
}
inline const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag >&
Data::tags() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.Data.tags)
  return tags_;
}

// repeated string texts = 6;
inline int Data::texts_size() const {
  return texts_.size();
}
inline void Data::clear_texts() {
  texts_.Clear();
}
inline const ::std::string& Data::texts(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.texts)
  return texts_.Get(index);
}
inline ::std::string* Data::mutable_texts(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Data.texts)
  return texts_.Mutable(index);
}
inline void Data::set_texts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kinectrgbd.Data.texts)
  texts_.Mutable(index)->assign(value);
}
inline void Data::set_texts(int index, const char* value) {
  texts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kinectrgbd.Data.texts)
}
inline void Data::set_texts(int index, const char* value, size_t size) {
  texts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kinectrgbd.Data.texts)
}
inline ::std::string* Data::add_texts() {
  return texts_.Add();
}
inline void Data::add_texts(const ::std::string& value) {
  texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kinectrgbd.Data.texts)
}
inline void Data::add_texts(const char* value) {
  texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kinectrgbd.Data.texts)
}
inline void Data::add_texts(const char* value, size_t size) {
  texts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kinectrgbd.Data.texts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Data::texts() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.Data.texts)
  return texts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Data::mutable_texts() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.Data.texts)
  return &texts_;
}

// optional bool status = 7;
inline void Data::clear_status() {
  status_ = false;
}
inline bool Data::status() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.status)
  return status_;
}
inline void Data::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Data.status)
}

// -------------------------------------------------------------------

// DataStream

// optional bool status = 1;
inline void DataStream::clear_status() {
  status_ = false;
}
inline bool DataStream::status() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.DataStream.status)
  return status_;
}
inline void DataStream::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.DataStream.status)
}

// repeated .kinectrgbd.Data data = 2;
inline int DataStream::data_size() const {
  return data_.size();
}
inline void DataStream::clear_data() {
  data_.Clear();
}
inline const ::kinectrgbd::Data& DataStream::data(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.DataStream.data)
  return data_.Get(index);
}
inline ::kinectrgbd::Data* DataStream::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.DataStream.data)
  return data_.Mutable(index);
}
inline ::kinectrgbd::Data* DataStream::add_data() {
  // @@protoc_insertion_point(field_add:kinectrgbd.DataStream.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Data >*
DataStream::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.DataStream.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Data >&
DataStream::data() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.DataStream.data)
  return data_;
}

// -------------------------------------------------------------------

// BitStream

// optional bool status = 1;
inline void BitStream::clear_status() {
  status_ = false;
}
inline bool BitStream::status() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.BitStream.status)
  return status_;
}
inline void BitStream::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.BitStream.status)
}

// repeated .kinectrgbd.Bit data = 2;
inline int BitStream::data_size() const {
  return data_.size();
}
inline void BitStream::clear_data() {
  data_.Clear();
}
inline const ::kinectrgbd::Bit& BitStream::data(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.BitStream.data)
  return data_.Get(index);
}
inline ::kinectrgbd::Bit* BitStream::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.BitStream.data)
  return data_.Mutable(index);
}
inline ::kinectrgbd::Bit* BitStream::add_data() {
  // @@protoc_insertion_point(field_add:kinectrgbd.BitStream.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit >*
BitStream::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.BitStream.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit >&
BitStream::data() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.BitStream.data)
  return data_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kinectrgbd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kinect_5frgbd_2eproto__INCLUDED
