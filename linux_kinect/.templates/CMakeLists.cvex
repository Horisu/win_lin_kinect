cmake_minimum_required(VERSION 2.8.3)
project(linux_kinect)

# Dependencies

# catkin ROS
find_package(catkin REQUIRED COMPONENTS
  roscpp std_msgs sensor_msgs geometry_msgs
  message_generation
  )
if(NOT catkin_LIBRARIES)
  message(FATAL "catkin required but not supported")
endif()

# pcl
find_package(PCL 1.8 REQUIRED)
include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})

# opencv
find_package(OpenCV 3 REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
message(STATUS "OpenCV library status:")
message(STATUS "    version: ${OpenCV_VERSION}")
message(STATUS "    libraries: ${OpenCV_LIBS}")
message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")

set(GENERATE_SRV)
if(GENERATE_SRV)
  # auto-add messages
  # add_message_files(
  #   FILES
  # )
  # auto-add services
  add_service_files(
    FILES
  )
  generate_messages(
    DEPENDENCIES
    std_msgs
    geometry_msgs
    sensor_msgs
  )
endif()

add_definitions(-std=c++11)
include_directories(lib)

add_executable(points_sample
  examples/points.cc
  lib/KinectInterface.cc
  )
target_link_libraries(points_sample
  ${catkin_LIBRARIES})

add_executable(image_sample
  examples/image.cc
  lib/KinectInterface.cc
  )
target_link_libraries(image_sample
  ${catkin_LIBRARIES})

add_executable(image_centers_sample
  examples/image_centers.cc
  lib/KinectInterface.cc
  )
target_link_libraries(image_centers_sample
  ${catkin_LIBRARIES} ${OpenCV_LIBS})

add_executable(image_bounds_sample
  examples/image_bounds.cc
  lib/KinectInterface.cc
  )
target_link_libraries(image_bounds_sample
  ${catkin_LIBRARIES} ${OpenCV_LIBS} ${PCL_LIBRARIES})