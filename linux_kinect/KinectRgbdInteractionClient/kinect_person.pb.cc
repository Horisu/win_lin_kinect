// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_person.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kinect_person.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kinectperson {

namespace {

const ::google::protobuf::Descriptor* Face_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Face_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Person_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Person_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Text_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rgbd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rgbd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointStream_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_kinect_5fperson_2eproto() {
  protobuf_AddDesc_kinect_5fperson_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kinect_person.proto");
  GOOGLE_CHECK(file != NULL);
  Face_descriptor_ = file->message_type(0);
  static const int Face_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, yaw_),
  };
  Face_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Face_descriptor_,
      Face::default_instance_,
      Face_offsets_,
      -1,
      -1,
      -1,
      sizeof(Face),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _is_default_instance_));
  Point_descriptor_ = file->message_type(1);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _is_default_instance_));
  Person_descriptor_ = file->message_type(2);
  static const int Person_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, speaking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, looking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, id_),
  };
  Person_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Person_descriptor_,
      Person::default_instance_,
      Person_offsets_,
      -1,
      -1,
      -1,
      sizeof(Person),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _is_default_instance_));
  PersonStream_descriptor_ = file->message_type(3);
  static const int PersonStream_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonStream, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonStream, data_),
  };
  PersonStream_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PersonStream_descriptor_,
      PersonStream::default_instance_,
      PersonStream_offsets_,
      -1,
      -1,
      -1,
      sizeof(PersonStream),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonStream, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonStream, _is_default_instance_));
  Response_descriptor_ = file->message_type(4);
  static const int Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  Text_descriptor_ = file->message_type(5);
  static const int Text_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, text_),
  };
  Text_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Text_descriptor_,
      Text::default_instance_,
      Text_offsets_,
      -1,
      -1,
      -1,
      sizeof(Text),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _is_default_instance_));
  Rgbd_descriptor_ = file->message_type(6);
  static const int Rgbd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rgbd, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rgbd, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rgbd, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rgbd, color_),
  };
  Rgbd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rgbd_descriptor_,
      Rgbd::default_instance_,
      Rgbd_offsets_,
      -1,
      -1,
      -1,
      sizeof(Rgbd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rgbd, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rgbd, _is_default_instance_));
  PointStream_descriptor_ = file->message_type(7);
  static const int PointStream_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointStream, data_),
  };
  PointStream_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointStream_descriptor_,
      PointStream::default_instance_,
      PointStream_offsets_,
      -1,
      -1,
      -1,
      sizeof(PointStream),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointStream, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointStream, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kinect_5fperson_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Face_descriptor_, &Face::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Person_descriptor_, &Person::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PersonStream_descriptor_, &PersonStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Text_descriptor_, &Text::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rgbd_descriptor_, &Rgbd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointStream_descriptor_, &PointStream::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kinect_5fperson_2eproto() {
  delete Face::default_instance_;
  delete Face_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Person::default_instance_;
  delete Person_reflection_;
  delete PersonStream::default_instance_;
  delete PersonStream_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Text::default_instance_;
  delete Text_reflection_;
  delete Rgbd::default_instance_;
  delete Rgbd_reflection_;
  delete PointStream::default_instance_;
  delete PointStream_reflection_;
}

void protobuf_AddDesc_kinect_5fperson_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023kinect_person.proto\022\014kinectperson\"e\n\004F"
    "ace\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\r\n\005width\030\003 \001(\002"
    "\022\016\n\006height\030\004 \001(\002\022\014\n\004roll\030\005 \001(\002\022\r\n\005pitch\030"
    "\006 \001(\002\022\013\n\003yaw\030\007 \001(\002\"\035\n\005Point\022\t\n\001x\030\001 \001(\002\022\t"
    "\n\001y\030\002 \001(\002\"\222\001\n\006Person\022 \n\004face\030\001 \001(\0132\022.kin"
    "ectperson.Face\022\020\n\010speaking\030\002 \001(\010\022\017\n\007look"
    "ing\030\003 \001(\010\022%\n\010position\030\004 \001(\0132\023.kinectpers"
    "on.Point\022\020\n\010distance\030\005 \001(\002\022\n\n\002id\030\006 \001(\005\"B"
    "\n\014PersonStream\022\016\n\006status\030\001 \001(\005\022\"\n\004data\030\002"
    " \003(\0132\024.kinectperson.Person\"\032\n\010Response\022\016"
    "\n\006status\030\001 \001(\010\"\024\n\004Text\022\014\n\004text\030\001 \001(\t\"6\n\004"
    "Rgbd\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\r\n"
    "\005color\030\004 \001(\005\"/\n\013PointStream\022 \n\004data\030\001 \003("
    "\0132\022.kinectperson.Rgbd2\356\002\n\014KinectPerson\022G"
    "\n\017SendPersonState\022\032.kinectperson.PersonS"
    "tream\032\026.kinectperson.Response\"\000\022D\n\024SendV"
    "oiceRecognition\022\022.kinectperson.Text\032\026.ki"
    "nectperson.Response\"\000\022B\n\022SendConsoleComm"
    "and\022\022.kinectperson.Text\032\026.kinectperson.R"
    "esponse\"\000\022A\n\021CreateRobotClient\022\022.kinectp"
    "erson.Text\032\026.kinectperson.Response\"\000\022H\n\017"
    "SendPointStream\022\031.kinectperson.PointStre"
    "am\032\026.kinectperson.Response\"\000(\001B\017\n\007ex.grp"
    "c\242\002\003RTGb\006proto3", 935);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kinect_person.proto", &protobuf_RegisterTypes);
  Face::default_instance_ = new Face();
  Point::default_instance_ = new Point();
  Person::default_instance_ = new Person();
  PersonStream::default_instance_ = new PersonStream();
  Response::default_instance_ = new Response();
  Text::default_instance_ = new Text();
  Rgbd::default_instance_ = new Rgbd();
  PointStream::default_instance_ = new PointStream();
  Face::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Person::default_instance_->InitAsDefaultInstance();
  PersonStream::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Text::default_instance_->InitAsDefaultInstance();
  Rgbd::default_instance_->InitAsDefaultInstance();
  PointStream::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kinect_5fperson_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kinect_5fperson_2eproto {
  StaticDescriptorInitializer_kinect_5fperson_2eproto() {
    protobuf_AddDesc_kinect_5fperson_2eproto();
  }
} static_descriptor_initializer_kinect_5fperson_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Face::kXFieldNumber;
const int Face::kYFieldNumber;
const int Face::kWidthFieldNumber;
const int Face::kHeightFieldNumber;
const int Face::kRollFieldNumber;
const int Face::kPitchFieldNumber;
const int Face::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Face::Face()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectperson.Face)
}

void Face::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Face::Face(const Face& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectperson.Face)
}

void Face::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  width_ = 0;
  height_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:kinectperson.Face)
  SharedDtor();
}

void Face::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Face::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Face_descriptor_;
}

const Face& Face::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5fperson_2eproto();
  return *default_instance_;
}

Face* Face::default_instance_ = NULL;

Face* Face::New(::google::protobuf::Arena* arena) const {
  Face* n = new Face;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:kinectperson.Face)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Face, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Face*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, yaw_);

#undef ZR_HELPER_
#undef ZR_

}

bool Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectperson.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_width;
        break;
      }

      // optional float width = 3;
      case 3: {
        if (tag == 29) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }

      // optional float height = 4;
      case 4: {
        if (tag == 37) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_roll;
        break;
      }

      // optional float roll = 5;
      case 5: {
        if (tag == 45) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_pitch;
        break;
      }

      // optional float pitch = 6;
      case 6: {
        if (tag == 53) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_yaw;
        break;
      }

      // optional float yaw = 7;
      case 7: {
        if (tag == 61) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectperson.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectperson.Face)
  return false;
#undef DO_
}

void Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectperson.Face)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // optional float height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  // optional float roll = 5;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->roll(), output);
  }

  // optional float pitch = 6;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pitch(), output);
  }

  // optional float yaw = 7;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yaw(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectperson.Face)
}

::google::protobuf::uint8* Face::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectperson.Face)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width(), target);
  }

  // optional float height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  // optional float roll = 5;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->roll(), target);
  }

  // optional float pitch = 6;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pitch(), target);
  }

  // optional float yaw = 7;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yaw(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectperson.Face)
  return target;
}

int Face::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kinectperson.Face)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float width = 3;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // optional float height = 4;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // optional float roll = 5;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // optional float pitch = 6;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // optional float yaw = 7;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kinectperson.Face)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Face* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Face>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kinectperson.Face)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kinectperson.Face)
    MergeFrom(*source);
  }
}

void Face::MergeFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kinectperson.Face)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
}

void Face::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kinectperson.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kinectperson.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {

  return true;
}

void Face::Swap(Face* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Face::InternalSwap(Face* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(roll_, other->roll_);
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_, other->yaw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Face::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Face_descriptor_;
  metadata.reflection = Face_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Face

// optional float x = 1;
void Face::clear_x() {
  x_ = 0;
}
 float Face::x() const {
  // @@protoc_insertion_point(field_get:kinectperson.Face.x)
  return x_;
}
 void Face::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Face.x)
}

// optional float y = 2;
void Face::clear_y() {
  y_ = 0;
}
 float Face::y() const {
  // @@protoc_insertion_point(field_get:kinectperson.Face.y)
  return y_;
}
 void Face::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Face.y)
}

// optional float width = 3;
void Face::clear_width() {
  width_ = 0;
}
 float Face::width() const {
  // @@protoc_insertion_point(field_get:kinectperson.Face.width)
  return width_;
}
 void Face::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Face.width)
}

// optional float height = 4;
void Face::clear_height() {
  height_ = 0;
}
 float Face::height() const {
  // @@protoc_insertion_point(field_get:kinectperson.Face.height)
  return height_;
}
 void Face::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Face.height)
}

// optional float roll = 5;
void Face::clear_roll() {
  roll_ = 0;
}
 float Face::roll() const {
  // @@protoc_insertion_point(field_get:kinectperson.Face.roll)
  return roll_;
}
 void Face::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Face.roll)
}

// optional float pitch = 6;
void Face::clear_pitch() {
  pitch_ = 0;
}
 float Face::pitch() const {
  // @@protoc_insertion_point(field_get:kinectperson.Face.pitch)
  return pitch_;
}
 void Face::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Face.pitch)
}

// optional float yaw = 7;
void Face::clear_yaw() {
  yaw_ = 0;
}
 float Face::yaw() const {
  // @@protoc_insertion_point(field_get:kinectperson.Face.yaw)
  return yaw_;
}
 void Face::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Face.yaw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectperson.Point)
}

void Point::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectperson.Point)
}

void Point::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:kinectperson.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5fperson_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:kinectperson.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectperson.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectperson.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectperson.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectperson.Point)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectperson.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectperson.Point)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectperson.Point)
  return target;
}

int Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kinectperson.Point)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kinectperson.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kinectperson.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kinectperson.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kinectperson.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kinectperson.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kinectperson.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional float x = 1;
void Point::clear_x() {
  x_ = 0;
}
 float Point::x() const {
  // @@protoc_insertion_point(field_get:kinectperson.Point.x)
  return x_;
}
 void Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Point.x)
}

// optional float y = 2;
void Point::clear_y() {
  y_ = 0;
}
 float Point::y() const {
  // @@protoc_insertion_point(field_get:kinectperson.Point.y)
  return y_;
}
 void Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Point.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Person::kFaceFieldNumber;
const int Person::kSpeakingFieldNumber;
const int Person::kLookingFieldNumber;
const int Person::kPositionFieldNumber;
const int Person::kDistanceFieldNumber;
const int Person::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Person::Person()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectperson.Person)
}

void Person::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  face_ = const_cast< ::kinectperson::Face*>(&::kinectperson::Face::default_instance());
  position_ = const_cast< ::kinectperson::Point*>(&::kinectperson::Point::default_instance());
}

Person::Person(const Person& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectperson.Person)
}

void Person::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  face_ = NULL;
  speaking_ = false;
  looking_ = false;
  position_ = NULL;
  distance_ = 0;
  id_ = 0;
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:kinectperson.Person)
  SharedDtor();
}

void Person::SharedDtor() {
  if (this != default_instance_) {
    delete face_;
    delete position_;
  }
}

void Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Person::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Person_descriptor_;
}

const Person& Person::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5fperson_2eproto();
  return *default_instance_;
}

Person* Person::default_instance_ = NULL;

Person* Person::New(::google::protobuf::Arena* arena) const {
  Person* n = new Person;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:kinectperson.Person)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Person, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Person*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(speaking_, distance_);
  if (GetArenaNoVirtual() == NULL && face_ != NULL) delete face_;
  face_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  id_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectperson.Person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kinectperson.Face face = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_face()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_speaking;
        break;
      }

      // optional bool speaking = 2;
      case 2: {
        if (tag == 16) {
         parse_speaking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &speaking_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_looking;
        break;
      }

      // optional bool looking = 3;
      case 3: {
        if (tag == 24) {
         parse_looking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &looking_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }

      // optional .kinectperson.Point position = 4;
      case 4: {
        if (tag == 34) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_distance;
        break;
      }

      // optional float distance = 5;
      case 5: {
        if (tag == 45) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }

      // optional int32 id = 6;
      case 6: {
        if (tag == 48) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectperson.Person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectperson.Person)
  return false;
#undef DO_
}

void Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectperson.Person)
  // optional .kinectperson.Face face = 1;
  if (this->has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->face_, output);
  }

  // optional bool speaking = 2;
  if (this->speaking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->speaking(), output);
  }

  // optional bool looking = 3;
  if (this->looking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->looking(), output);
  }

  // optional .kinectperson.Point position = 4;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->position_, output);
  }

  // optional float distance = 5;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->distance(), output);
  }

  // optional int32 id = 6;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectperson.Person)
}

::google::protobuf::uint8* Person::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectperson.Person)
  // optional .kinectperson.Face face = 1;
  if (this->has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->face_, target);
  }

  // optional bool speaking = 2;
  if (this->speaking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->speaking(), target);
  }

  // optional bool looking = 3;
  if (this->looking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->looking(), target);
  }

  // optional .kinectperson.Point position = 4;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->position_, target);
  }

  // optional float distance = 5;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->distance(), target);
  }

  // optional int32 id = 6;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectperson.Person)
  return target;
}

int Person::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kinectperson.Person)
  int total_size = 0;

  // optional .kinectperson.Face face = 1;
  if (this->has_face()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->face_);
  }

  // optional bool speaking = 2;
  if (this->speaking() != 0) {
    total_size += 1 + 1;
  }

  // optional bool looking = 3;
  if (this->looking() != 0) {
    total_size += 1 + 1;
  }

  // optional .kinectperson.Point position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional float distance = 5;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 id = 6;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kinectperson.Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Person* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Person>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kinectperson.Person)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kinectperson.Person)
    MergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kinectperson.Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_face()) {
    mutable_face()->::kinectperson::Face::MergeFrom(from.face());
  }
  if (from.speaking() != 0) {
    set_speaking(from.speaking());
  }
  if (from.looking() != 0) {
    set_looking(from.looking());
  }
  if (from.has_position()) {
    mutable_position()->::kinectperson::Point::MergeFrom(from.position());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Person::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kinectperson.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kinectperson.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {

  return true;
}

void Person::Swap(Person* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Person::InternalSwap(Person* other) {
  std::swap(face_, other->face_);
  std::swap(speaking_, other->speaking_);
  std::swap(looking_, other->looking_);
  std::swap(position_, other->position_);
  std::swap(distance_, other->distance_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Person::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Person_descriptor_;
  metadata.reflection = Person_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// optional .kinectperson.Face face = 1;
bool Person::has_face() const {
  return !_is_default_instance_ && face_ != NULL;
}
void Person::clear_face() {
  if (GetArenaNoVirtual() == NULL && face_ != NULL) delete face_;
  face_ = NULL;
}
const ::kinectperson::Face& Person::face() const {
  // @@protoc_insertion_point(field_get:kinectperson.Person.face)
  return face_ != NULL ? *face_ : *default_instance_->face_;
}
::kinectperson::Face* Person::mutable_face() {
  
  if (face_ == NULL) {
    face_ = new ::kinectperson::Face;
  }
  // @@protoc_insertion_point(field_mutable:kinectperson.Person.face)
  return face_;
}
::kinectperson::Face* Person::release_face() {
  // @@protoc_insertion_point(field_release:kinectperson.Person.face)
  
  ::kinectperson::Face* temp = face_;
  face_ = NULL;
  return temp;
}
void Person::set_allocated_face(::kinectperson::Face* face) {
  delete face_;
  face_ = face;
  if (face) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kinectperson.Person.face)
}

// optional bool speaking = 2;
void Person::clear_speaking() {
  speaking_ = false;
}
 bool Person::speaking() const {
  // @@protoc_insertion_point(field_get:kinectperson.Person.speaking)
  return speaking_;
}
 void Person::set_speaking(bool value) {
  
  speaking_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Person.speaking)
}

// optional bool looking = 3;
void Person::clear_looking() {
  looking_ = false;
}
 bool Person::looking() const {
  // @@protoc_insertion_point(field_get:kinectperson.Person.looking)
  return looking_;
}
 void Person::set_looking(bool value) {
  
  looking_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Person.looking)
}

// optional .kinectperson.Point position = 4;
bool Person::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void Person::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::kinectperson::Point& Person::position() const {
  // @@protoc_insertion_point(field_get:kinectperson.Person.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::kinectperson::Point* Person::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::kinectperson::Point;
  }
  // @@protoc_insertion_point(field_mutable:kinectperson.Person.position)
  return position_;
}
::kinectperson::Point* Person::release_position() {
  // @@protoc_insertion_point(field_release:kinectperson.Person.position)
  
  ::kinectperson::Point* temp = position_;
  position_ = NULL;
  return temp;
}
void Person::set_allocated_position(::kinectperson::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kinectperson.Person.position)
}

// optional float distance = 5;
void Person::clear_distance() {
  distance_ = 0;
}
 float Person::distance() const {
  // @@protoc_insertion_point(field_get:kinectperson.Person.distance)
  return distance_;
}
 void Person::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Person.distance)
}

// optional int32 id = 6;
void Person::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Person::id() const {
  // @@protoc_insertion_point(field_get:kinectperson.Person.id)
  return id_;
}
 void Person::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Person.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PersonStream::kStatusFieldNumber;
const int PersonStream::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PersonStream::PersonStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectperson.PersonStream)
}

void PersonStream::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PersonStream::PersonStream(const PersonStream& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectperson.PersonStream)
}

void PersonStream::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

PersonStream::~PersonStream() {
  // @@protoc_insertion_point(destructor:kinectperson.PersonStream)
  SharedDtor();
}

void PersonStream::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PersonStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonStream_descriptor_;
}

const PersonStream& PersonStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5fperson_2eproto();
  return *default_instance_;
}

PersonStream* PersonStream::default_instance_ = NULL;

PersonStream* PersonStream::New(::google::protobuf::Arena* arena) const {
  PersonStream* n = new PersonStream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PersonStream::Clear() {
// @@protoc_insertion_point(message_clear_start:kinectperson.PersonStream)
  status_ = 0;
  data_.Clear();
}

bool PersonStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectperson.PersonStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .kinectperson.Person data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectperson.PersonStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectperson.PersonStream)
  return false;
#undef DO_
}

void PersonStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectperson.PersonStream)
  // optional int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // repeated .kinectperson.Person data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectperson.PersonStream)
}

::google::protobuf::uint8* PersonStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectperson.PersonStream)
  // optional int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // repeated .kinectperson.Person data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectperson.PersonStream)
  return target;
}

int PersonStream::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kinectperson.PersonStream)
  int total_size = 0;

  // optional int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // repeated .kinectperson.Person data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kinectperson.PersonStream)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PersonStream* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PersonStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kinectperson.PersonStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kinectperson.PersonStream)
    MergeFrom(*source);
  }
}

void PersonStream::MergeFrom(const PersonStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kinectperson.PersonStream)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void PersonStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kinectperson.PersonStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonStream::CopyFrom(const PersonStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kinectperson.PersonStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonStream::IsInitialized() const {

  return true;
}

void PersonStream::Swap(PersonStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PersonStream::InternalSwap(PersonStream* other) {
  std::swap(status_, other->status_);
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PersonStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonStream_descriptor_;
  metadata.reflection = PersonStream_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PersonStream

// optional int32 status = 1;
void PersonStream::clear_status() {
  status_ = 0;
}
 ::google::protobuf::int32 PersonStream::status() const {
  // @@protoc_insertion_point(field_get:kinectperson.PersonStream.status)
  return status_;
}
 void PersonStream::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.PersonStream.status)
}

// repeated .kinectperson.Person data = 2;
int PersonStream::data_size() const {
  return data_.size();
}
void PersonStream::clear_data() {
  data_.Clear();
}
const ::kinectperson::Person& PersonStream::data(int index) const {
  // @@protoc_insertion_point(field_get:kinectperson.PersonStream.data)
  return data_.Get(index);
}
::kinectperson::Person* PersonStream::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:kinectperson.PersonStream.data)
  return data_.Mutable(index);
}
::kinectperson::Person* PersonStream::add_data() {
  // @@protoc_insertion_point(field_add:kinectperson.PersonStream.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::kinectperson::Person >*
PersonStream::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:kinectperson.PersonStream.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::kinectperson::Person >&
PersonStream::data() const {
  // @@protoc_insertion_point(field_list:kinectperson.PersonStream.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectperson.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectperson.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = false;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:kinectperson.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5fperson_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:kinectperson.Response)
  status_ = false;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectperson.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectperson.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectperson.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectperson.Response)
  // optional bool status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectperson.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectperson.Response)
  // optional bool status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectperson.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kinectperson.Response)
  int total_size = 0;

  // optional bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kinectperson.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kinectperson.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kinectperson.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kinectperson.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kinectperson.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kinectperson.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional bool status = 1;
void Response::clear_status() {
  status_ = false;
}
 bool Response::status() const {
  // @@protoc_insertion_point(field_get:kinectperson.Response.status)
  return status_;
}
 void Response::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Response.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Text::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Text::Text()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectperson.Text)
}

void Text::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Text::Text(const Text& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectperson.Text)
}

void Text::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:kinectperson.Text)
  SharedDtor();
}

void Text::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Text_descriptor_;
}

const Text& Text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5fperson_2eproto();
  return *default_instance_;
}

Text* Text::default_instance_ = NULL;

Text* Text::New(::google::protobuf::Arena* arena) const {
  Text* n = new Text;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:kinectperson.Text)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectperson.Text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kinectperson.Text.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectperson.Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectperson.Text)
  return false;
#undef DO_
}

void Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectperson.Text)
  // optional string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kinectperson.Text.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectperson.Text)
}

::google::protobuf::uint8* Text::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectperson.Text)
  // optional string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kinectperson.Text.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectperson.Text)
  return target;
}

int Text::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kinectperson.Text)
  int total_size = 0;

  // optional string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kinectperson.Text)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Text* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Text>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kinectperson.Text)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kinectperson.Text)
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kinectperson.Text)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void Text::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kinectperson.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kinectperson.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {

  return true;
}

void Text::Swap(Text* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Text::InternalSwap(Text* other) {
  text_.Swap(&other->text_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Text_descriptor_;
  metadata.reflection = Text_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Text

// optional string text = 1;
void Text::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Text::text() const {
  // @@protoc_insertion_point(field_get:kinectperson.Text.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Text::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kinectperson.Text.text)
}
 void Text::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kinectperson.Text.text)
}
 void Text::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kinectperson.Text.text)
}
 ::std::string* Text::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:kinectperson.Text.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Text::release_text() {
  // @@protoc_insertion_point(field_release:kinectperson.Text.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Text::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:kinectperson.Text.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rgbd::kXFieldNumber;
const int Rgbd::kYFieldNumber;
const int Rgbd::kZFieldNumber;
const int Rgbd::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rgbd::Rgbd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectperson.Rgbd)
}

void Rgbd::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Rgbd::Rgbd(const Rgbd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectperson.Rgbd)
}

void Rgbd::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  color_ = 0;
}

Rgbd::~Rgbd() {
  // @@protoc_insertion_point(destructor:kinectperson.Rgbd)
  SharedDtor();
}

void Rgbd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rgbd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rgbd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rgbd_descriptor_;
}

const Rgbd& Rgbd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5fperson_2eproto();
  return *default_instance_;
}

Rgbd* Rgbd::default_instance_ = NULL;

Rgbd* Rgbd::New(::google::protobuf::Arena* arena) const {
  Rgbd* n = new Rgbd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rgbd::Clear() {
// @@protoc_insertion_point(message_clear_start:kinectperson.Rgbd)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Rgbd, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Rgbd*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, color_);

#undef ZR_HELPER_
#undef ZR_

}

bool Rgbd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectperson.Rgbd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_color;
        break;
      }

      // optional int32 color = 4;
      case 4: {
        if (tag == 32) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectperson.Rgbd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectperson.Rgbd)
  return false;
#undef DO_
}

void Rgbd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectperson.Rgbd)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional int32 color = 4;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->color(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectperson.Rgbd)
}

::google::protobuf::uint8* Rgbd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectperson.Rgbd)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional int32 color = 4;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->color(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectperson.Rgbd)
  return target;
}

int Rgbd::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kinectperson.Rgbd)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 color = 4;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rgbd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kinectperson.Rgbd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rgbd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Rgbd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kinectperson.Rgbd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kinectperson.Rgbd)
    MergeFrom(*source);
  }
}

void Rgbd::MergeFrom(const Rgbd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kinectperson.Rgbd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
}

void Rgbd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kinectperson.Rgbd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rgbd::CopyFrom(const Rgbd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kinectperson.Rgbd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rgbd::IsInitialized() const {

  return true;
}

void Rgbd::Swap(Rgbd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rgbd::InternalSwap(Rgbd* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(color_, other->color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rgbd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rgbd_descriptor_;
  metadata.reflection = Rgbd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rgbd

// optional float x = 1;
void Rgbd::clear_x() {
  x_ = 0;
}
 float Rgbd::x() const {
  // @@protoc_insertion_point(field_get:kinectperson.Rgbd.x)
  return x_;
}
 void Rgbd::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Rgbd.x)
}

// optional float y = 2;
void Rgbd::clear_y() {
  y_ = 0;
}
 float Rgbd::y() const {
  // @@protoc_insertion_point(field_get:kinectperson.Rgbd.y)
  return y_;
}
 void Rgbd::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Rgbd.y)
}

// optional float z = 3;
void Rgbd::clear_z() {
  z_ = 0;
}
 float Rgbd::z() const {
  // @@protoc_insertion_point(field_get:kinectperson.Rgbd.z)
  return z_;
}
 void Rgbd::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Rgbd.z)
}

// optional int32 color = 4;
void Rgbd::clear_color() {
  color_ = 0;
}
 ::google::protobuf::int32 Rgbd::color() const {
  // @@protoc_insertion_point(field_get:kinectperson.Rgbd.color)
  return color_;
}
 void Rgbd::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:kinectperson.Rgbd.color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointStream::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointStream::PointStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectperson.PointStream)
}

void PointStream::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PointStream::PointStream(const PointStream& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectperson.PointStream)
}

void PointStream::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PointStream::~PointStream() {
  // @@protoc_insertion_point(destructor:kinectperson.PointStream)
  SharedDtor();
}

void PointStream::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointStream_descriptor_;
}

const PointStream& PointStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5fperson_2eproto();
  return *default_instance_;
}

PointStream* PointStream::default_instance_ = NULL;

PointStream* PointStream::New(::google::protobuf::Arena* arena) const {
  PointStream* n = new PointStream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointStream::Clear() {
// @@protoc_insertion_point(message_clear_start:kinectperson.PointStream)
  data_.Clear();
}

bool PointStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectperson.PointStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kinectperson.Rgbd data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectperson.PointStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectperson.PointStream)
  return false;
#undef DO_
}

void PointStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectperson.PointStream)
  // repeated .kinectperson.Rgbd data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectperson.PointStream)
}

::google::protobuf::uint8* PointStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectperson.PointStream)
  // repeated .kinectperson.Rgbd data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectperson.PointStream)
  return target;
}

int PointStream::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:kinectperson.PointStream)
  int total_size = 0;

  // repeated .kinectperson.Rgbd data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kinectperson.PointStream)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PointStream* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kinectperson.PointStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kinectperson.PointStream)
    MergeFrom(*source);
  }
}

void PointStream::MergeFrom(const PointStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kinectperson.PointStream)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
}

void PointStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kinectperson.PointStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointStream::CopyFrom(const PointStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kinectperson.PointStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointStream::IsInitialized() const {

  return true;
}

void PointStream::Swap(PointStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointStream::InternalSwap(PointStream* other) {
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointStream_descriptor_;
  metadata.reflection = PointStream_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointStream

// repeated .kinectperson.Rgbd data = 1;
int PointStream::data_size() const {
  return data_.size();
}
void PointStream::clear_data() {
  data_.Clear();
}
const ::kinectperson::Rgbd& PointStream::data(int index) const {
  // @@protoc_insertion_point(field_get:kinectperson.PointStream.data)
  return data_.Get(index);
}
::kinectperson::Rgbd* PointStream::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:kinectperson.PointStream.data)
  return data_.Mutable(index);
}
::kinectperson::Rgbd* PointStream::add_data() {
  // @@protoc_insertion_point(field_add:kinectperson.PointStream.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::kinectperson::Rgbd >*
PointStream::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:kinectperson.PointStream.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::kinectperson::Rgbd >&
PointStream::data() const {
  // @@protoc_insertion_point(field_list:kinectperson.PointStream.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace kinectperson

// @@protoc_insertion_point(global_scope)
