// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_rgbd.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Kinectrgbd {
  public static class KinectRgbd
  {
    static readonly string __ServiceName = "kinectrgbd.KinectRgbd";

    static readonly Marshaller<global::Kinectrgbd.Request> __Marshaller_Request = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kinectrgbd.Request.Parser.ParseFrom);
    static readonly Marshaller<global::Kinectrgbd.Point> __Marshaller_Point = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kinectrgbd.Point.Parser.ParseFrom);

    static readonly Method<global::Kinectrgbd.Request, global::Kinectrgbd.Point> __Method_GetPoints = new Method<global::Kinectrgbd.Request, global::Kinectrgbd.Point>(
        MethodType.ServerStreaming,
        __ServiceName,
        "GetPoints",
        __Marshaller_Request,
        __Marshaller_Point);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Kinectrgbd.Proto.KinectRgbd.Descriptor.Services[0]; }
    }

    // client interface
    public interface IKinectRgbdClient
    {
      AsyncServerStreamingCall<global::Kinectrgbd.Point> GetPoints(global::Kinectrgbd.Request request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::Kinectrgbd.Point> GetPoints(global::Kinectrgbd.Request request, CallOptions options);
    }

    // server-side interface
    public interface IKinectRgbd
    {
      Task GetPoints(global::Kinectrgbd.Request request, IServerStreamWriter<global::Kinectrgbd.Point> responseStream, ServerCallContext context);
    }

    // client stub
    public class KinectRgbdClient : ClientBase, IKinectRgbdClient
    {
      public KinectRgbdClient(Channel channel) : base(channel)
      {
      }
      public AsyncServerStreamingCall<global::Kinectrgbd.Point> GetPoints(global::Kinectrgbd.Request request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetPoints, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::Kinectrgbd.Point> GetPoints(global::Kinectrgbd.Request request, CallOptions options)
      {
        var call = CreateCall(__Method_GetPoints, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IKinectRgbd serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_GetPoints, serviceImpl.GetPoints).Build();
    }

    // creates a new client
    public static KinectRgbdClient NewClient(Channel channel)
    {
      return new KinectRgbdClient(channel);
    }

  }
}
#endregion
