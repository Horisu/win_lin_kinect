// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_rgbd.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kinectrgbd {

  /// <summary>Holder for reflection information generated from kinect_rgbd.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class KinectRgbdReflection {

    #region Descriptor
    /// <summary>File descriptor for kinect_rgbd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KinectRgbdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFraW5lY3RfcmdiZC5wcm90bxIKa2luZWN0cmdiZCIWCgZIZWFkZXISDAoE",
            "ZGF0YRgBIAEoCCJICgNCaXQSCQoBeBgBIAEoAhIJCgF5GAIgASgCEg0KBXdp",
            "ZHRoGAMgASgCEg4KBmhlaWdodBgEIAEoAhIMCgRuYW1lGAUgASgJIlIKB1Jl",
            "cXVlc3QSDAoEbW9kZRgBIAEoBRIdCgRkYXRhGAIgAygLMg8ua2luZWN0cmdi",
            "ZC5CaXQSDAoEb25jZRgDIAEoCBIMCgRhcmdzGAQgASgJIhoKCFJlc3BvbnNl",
            "Eg4KBmZpbmlzaBgBIAEoCCIXCgZQaXhlbHMSDQoFY29sb3IYASADKAUiNwoF",
            "UG9pbnQSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAISDQoFY29s",
            "b3IYBCABKAUiKQoGUG9pbnRzEh8KBGRhdGEYASADKAsyES5raW5lY3RyZ2Jk",
            "LlBvaW50IiYKA1RhZxILCgN0YWcYASABKAkSEgoKY29uZmlkZW5jZRgCIAEo",
            "AiKIAQoERGF0YRIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAhIh",
            "CghjYXB0aW9ucxgEIAMoCzIPLmtpbmVjdHJnYmQuVGFnEh0KBHRhZ3MYBSAD",
            "KAsyDy5raW5lY3RyZ2JkLlRhZxINCgV0ZXh0cxgGIAMoCRIOCgZzdGF0dXMY",
            "ByABKAgiPAoKRGF0YVN0cmVhbRIOCgZzdGF0dXMYASABKAgSHgoEZGF0YRgC",
            "IAMoCzIQLmtpbmVjdHJnYmQuRGF0YSI6CglCaXRTdHJlYW0SDgoGc3RhdHVz",
            "GAEgASgIEh0KBGRhdGEYAiADKAsyDy5raW5lY3RyZ2JkLkJpdDKdAwoKS2lu",
            "ZWN0UmdiZBI5CgxDaGVja1JlcXVlc3QSEi5raW5lY3RyZ2JkLkhlYWRlchoT",
            "LmtpbmVjdHJnYmQuUmVxdWVzdCIAEjgKClNlbmRQb2ludHMSEi5raW5lY3Ry",
            "Z2JkLlBvaW50cxoULmtpbmVjdHJnYmQuUmVzcG9uc2UiABI3CglTZW5kSW1h",
            "Z2USEi5raW5lY3RyZ2JkLlBpeGVscxoULmtpbmVjdHJnYmQuUmVzcG9uc2Ui",
            "ABJLChlSZXR1cm5Qb3NpdGlvbnNGcm9tUGl4ZWxzEhYua2luZWN0cmdiZC5E",
            "YXRhU3RyZWFtGhQua2luZWN0cmdiZC5SZXNwb25zZSIAElEKIFJldHVyblBp",
            "eGVsQm91bmRzRnJvbVNwYWNlQm91bmRzEhUua2luZWN0cmdiZC5CaXRTdHJl",
            "YW0aFC5raW5lY3RyZ2JkLlJlc3BvbnNlIgASQQoPUmV0dXJuQ29nbml0aW9u",
            "EhYua2luZWN0cmdiZC5EYXRhU3RyZWFtGhQua2luZWN0cmdiZC5SZXNwb25z",
            "ZSIAQg8KB2V4LmdycGOiAgNSVEdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrgbd.Header), global::Kinectrgbd.Header.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrgbd.Bit), global::Kinectrgbd.Bit.Parser, new[]{ "X", "Y", "Width", "Height", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrgbd.Request), global::Kinectrgbd.Request.Parser, new[]{ "Mode", "Data", "Once", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrgbd.Response), global::Kinectrgbd.Response.Parser, new[]{ "Finish" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrgbd.Pixels), global::Kinectrgbd.Pixels.Parser, new[]{ "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrgbd.Point), global::Kinectrgbd.Point.Parser, new[]{ "X", "Y", "Z", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrgbd.Points), global::Kinectrgbd.Points.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrgbd.Tag), global::Kinectrgbd.Tag.Parser, new[]{ "Tag_", "Confidence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrgbd.Data), global::Kinectrgbd.Data.Parser, new[]{ "X", "Y", "Z", "Captions", "Tags", "Texts", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrgbd.DataStream), global::Kinectrgbd.DataStream.Parser, new[]{ "Status", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kinectrgbd.BitStream), global::Kinectrgbd.BitStream.Parser, new[]{ "Status", "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.KinectRgbdReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Header(Header other) : this() {
      data_ = other.data_;
    }

    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private bool data_;
    public bool Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Data != false) hash ^= Data.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != false) {
        output.WriteRawTag(8);
        output.WriteBool(Data);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Data != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.Data != false) {
        Data = other.Data;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Bit : pb::IMessage<Bit> {
    private static readonly pb::MessageParser<Bit> _parser = new pb::MessageParser<Bit>(() => new Bit());
    public static pb::MessageParser<Bit> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.KinectRgbdReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Bit() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Bit(Bit other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      width_ = other.width_;
      height_ = other.height_;
      name_ = other.name_;
    }

    public Bit Clone() {
      return new Bit(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private float width_;
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private float height_;
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Bit);
    }

    public bool Equals(Bit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Name != other.Name) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Width != 0F) hash ^= Width.GetHashCode();
      if (Height != 0F) hash ^= Height.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Width != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Width);
      }
      if (Height != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Height);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(Bit other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Width = input.ReadFloat();
            break;
          }
          case 37: {
            Height = input.ReadFloat();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.KinectRgbdReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Request(Request other) : this() {
      mode_ = other.mode_;
      data_ = other.data_.Clone();
      once_ = other.once_;
      args_ = other.args_;
    }

    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private int mode_;
    public int Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Kinectrgbd.Bit> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::Kinectrgbd.Bit.Parser);
    private readonly pbc::RepeatedField<global::Kinectrgbd.Bit> data_ = new pbc::RepeatedField<global::Kinectrgbd.Bit>();
    public pbc::RepeatedField<global::Kinectrgbd.Bit> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "once" field.</summary>
    public const int OnceFieldNumber = 3;
    private bool once_;
    public bool Once {
      get { return once_; }
      set {
        once_ = value;
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 4;
    private string args_ = "";
    public string Args {
      get { return args_; }
      set {
        args_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if(!data_.Equals(other.data_)) return false;
      if (Once != other.Once) return false;
      if (Args != other.Args) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      hash ^= data_.GetHashCode();
      if (Once != false) hash ^= Once.GetHashCode();
      if (Args.Length != 0) hash ^= Args.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mode);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (Once != false) {
        output.WriteRawTag(24);
        output.WriteBool(Once);
      }
      if (Args.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Args);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (Once != false) {
        size += 1 + 1;
      }
      if (Args.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Args);
      }
      return size;
    }

    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      data_.Add(other.data_);
      if (other.Once != false) {
        Once = other.Once;
      }
      if (other.Args.Length != 0) {
        Args = other.Args;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mode = input.ReadInt32();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 24: {
            Once = input.ReadBool();
            break;
          }
          case 34: {
            Args = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.KinectRgbdReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Response(Response other) : this() {
      finish_ = other.finish_;
    }

    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "finish" field.</summary>
    public const int FinishFieldNumber = 1;
    private bool finish_;
    public bool Finish {
      get { return finish_; }
      set {
        finish_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Finish != other.Finish) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Finish != false) hash ^= Finish.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Finish != false) {
        output.WriteRawTag(8);
        output.WriteBool(Finish);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Finish != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Finish != false) {
        Finish = other.Finish;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Finish = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Pixels : pb::IMessage<Pixels> {
    private static readonly pb::MessageParser<Pixels> _parser = new pb::MessageParser<Pixels>(() => new Pixels());
    public static pb::MessageParser<Pixels> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.KinectRgbdReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Pixels() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Pixels(Pixels other) : this() {
      color_ = other.color_.Clone();
    }

    public Pixels Clone() {
      return new Pixels(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_color_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> color_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Color {
      get { return color_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Pixels);
    }

    public bool Equals(Pixels other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!color_.Equals(other.color_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= color_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      color_.WriteTo(output, _repeated_color_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += color_.CalculateSize(_repeated_color_codec);
      return size;
    }

    public void MergeFrom(Pixels other) {
      if (other == null) {
        return;
      }
      color_.Add(other.color_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            color_.AddEntriesFrom(input, _repeated_color_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.KinectRgbdReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Point(Point other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      color_ = other.color_;
    }

    public Point Clone() {
      return new Point(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 4;
    private int color_;
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Color != other.Color) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (Color != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Color);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      return size;
    }

    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 32: {
            Color = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Points : pb::IMessage<Points> {
    private static readonly pb::MessageParser<Points> _parser = new pb::MessageParser<Points>(() => new Points());
    public static pb::MessageParser<Points> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.KinectRgbdReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Points() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Points(Points other) : this() {
      data_ = other.data_.Clone();
    }

    public Points Clone() {
      return new Points(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Kinectrgbd.Point> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::Kinectrgbd.Point.Parser);
    private readonly pbc::RepeatedField<global::Kinectrgbd.Point> data_ = new pbc::RepeatedField<global::Kinectrgbd.Point>();
    public pbc::RepeatedField<global::Kinectrgbd.Point> Data {
      get { return data_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Points);
    }

    public bool Equals(Points other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(Points other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Tag : pb::IMessage<Tag> {
    private static readonly pb::MessageParser<Tag> _parser = new pb::MessageParser<Tag>(() => new Tag());
    public static pb::MessageParser<Tag> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.KinectRgbdReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Tag() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Tag(Tag other) : this() {
      tag_ = other.tag_;
      confidence_ = other.confidence_;
    }

    public Tag Clone() {
      return new Tag(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int Tag_FieldNumber = 1;
    private string tag_ = "";
    public string Tag_ {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 2;
    private float confidence_;
    public float Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Tag);
    }

    public bool Equals(Tag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag_ != other.Tag_) return false;
      if (Confidence != other.Confidence) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Tag_.Length != 0) hash ^= Tag_.GetHashCode();
      if (Confidence != 0F) hash ^= Confidence.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag_);
      }
      if (Confidence != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Confidence);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Tag_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag_);
      }
      if (Confidence != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Tag other) {
      if (other == null) {
        return;
      }
      if (other.Tag_.Length != 0) {
        Tag_ = other.Tag_;
      }
      if (other.Confidence != 0F) {
        Confidence = other.Confidence;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Tag_ = input.ReadString();
            break;
          }
          case 21: {
            Confidence = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Data : pb::IMessage<Data> {
    private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
    public static pb::MessageParser<Data> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.KinectRgbdReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Data(Data other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      captions_ = other.captions_.Clone();
      tags_ = other.tags_.Clone();
      texts_ = other.texts_.Clone();
      status_ = other.status_;
    }

    public Data Clone() {
      return new Data(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "captions" field.</summary>
    public const int CaptionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Kinectrgbd.Tag> _repeated_captions_codec
        = pb::FieldCodec.ForMessage(34, global::Kinectrgbd.Tag.Parser);
    private readonly pbc::RepeatedField<global::Kinectrgbd.Tag> captions_ = new pbc::RepeatedField<global::Kinectrgbd.Tag>();
    public pbc::RepeatedField<global::Kinectrgbd.Tag> Captions {
      get { return captions_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Kinectrgbd.Tag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(42, global::Kinectrgbd.Tag.Parser);
    private readonly pbc::RepeatedField<global::Kinectrgbd.Tag> tags_ = new pbc::RepeatedField<global::Kinectrgbd.Tag>();
    public pbc::RepeatedField<global::Kinectrgbd.Tag> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "texts" field.</summary>
    public const int TextsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_texts_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> texts_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Texts {
      get { return texts_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private bool status_;
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Data);
    }

    public bool Equals(Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if(!captions_.Equals(other.captions_)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if(!texts_.Equals(other.texts_)) return false;
      if (Status != other.Status) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      hash ^= captions_.GetHashCode();
      hash ^= tags_.GetHashCode();
      hash ^= texts_.GetHashCode();
      if (Status != false) hash ^= Status.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      captions_.WriteTo(output, _repeated_captions_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
      texts_.WriteTo(output, _repeated_texts_codec);
      if (Status != false) {
        output.WriteRawTag(56);
        output.WriteBool(Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      size += captions_.CalculateSize(_repeated_captions_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += texts_.CalculateSize(_repeated_texts_codec);
      if (Status != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Data other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      captions_.Add(other.captions_);
      tags_.Add(other.tags_);
      texts_.Add(other.texts_);
      if (other.Status != false) {
        Status = other.Status;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 34: {
            captions_.AddEntriesFrom(input, _repeated_captions_codec);
            break;
          }
          case 42: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 50: {
            texts_.AddEntriesFrom(input, _repeated_texts_codec);
            break;
          }
          case 56: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DataStream : pb::IMessage<DataStream> {
    private static readonly pb::MessageParser<DataStream> _parser = new pb::MessageParser<DataStream>(() => new DataStream());
    public static pb::MessageParser<DataStream> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.KinectRgbdReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DataStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DataStream(DataStream other) : this() {
      status_ = other.status_;
      data_ = other.data_.Clone();
    }

    public DataStream Clone() {
      return new DataStream(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private bool status_;
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Kinectrgbd.Data> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::Kinectrgbd.Data.Parser);
    private readonly pbc::RepeatedField<global::Kinectrgbd.Data> data_ = new pbc::RepeatedField<global::Kinectrgbd.Data>();
    public pbc::RepeatedField<global::Kinectrgbd.Data> Data {
      get { return data_; }
    }

    public override bool Equals(object other) {
      return Equals(other as DataStream);
    }

    public bool Equals(DataStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Status != false) hash ^= Status.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != false) {
        output.WriteRawTag(8);
        output.WriteBool(Status);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Status != false) {
        size += 1 + 1;
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(DataStream other) {
      if (other == null) {
        return;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
      data_.Add(other.data_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadBool();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BitStream : pb::IMessage<BitStream> {
    private static readonly pb::MessageParser<BitStream> _parser = new pb::MessageParser<BitStream>(() => new BitStream());
    public static pb::MessageParser<BitStream> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kinectrgbd.KinectRgbdReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BitStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BitStream(BitStream other) : this() {
      status_ = other.status_;
      data_ = other.data_.Clone();
    }

    public BitStream Clone() {
      return new BitStream(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private bool status_;
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Kinectrgbd.Bit> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::Kinectrgbd.Bit.Parser);
    private readonly pbc::RepeatedField<global::Kinectrgbd.Bit> data_ = new pbc::RepeatedField<global::Kinectrgbd.Bit>();
    public pbc::RepeatedField<global::Kinectrgbd.Bit> Data {
      get { return data_; }
    }

    public override bool Equals(object other) {
      return Equals(other as BitStream);
    }

    public bool Equals(BitStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Status != false) hash ^= Status.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != false) {
        output.WriteRawTag(8);
        output.WriteBool(Status);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Status != false) {
        size += 1 + 1;
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(BitStream other) {
      if (other == null) {
        return;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
      data_.Add(other.data_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadBool();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
