// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_person.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Kinectperson {
  public static class KinectPerson
  {
    static readonly string __ServiceName = "kinectperson.KinectPerson";

    static readonly Marshaller<global::Kinectperson.PersonStream> __Marshaller_PersonStream = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kinectperson.PersonStream.Parser.ParseFrom);
    static readonly Marshaller<global::Kinectperson.Response> __Marshaller_Response = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kinectperson.Response.Parser.ParseFrom);
    static readonly Marshaller<global::Kinectperson.Text> __Marshaller_Text = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kinectperson.Text.Parser.ParseFrom);
    static readonly Marshaller<global::Kinectperson.PointStream> __Marshaller_PointStream = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kinectperson.PointStream.Parser.ParseFrom);

    static readonly Method<global::Kinectperson.PersonStream, global::Kinectperson.Response> __Method_SendPersonState = new Method<global::Kinectperson.PersonStream, global::Kinectperson.Response>(
        MethodType.Unary,
        __ServiceName,
        "SendPersonState",
        __Marshaller_PersonStream,
        __Marshaller_Response);

    static readonly Method<global::Kinectperson.Text, global::Kinectperson.Response> __Method_SendVoiceRecognition = new Method<global::Kinectperson.Text, global::Kinectperson.Response>(
        MethodType.Unary,
        __ServiceName,
        "SendVoiceRecognition",
        __Marshaller_Text,
        __Marshaller_Response);

    static readonly Method<global::Kinectperson.Text, global::Kinectperson.Response> __Method_SendConsoleCommand = new Method<global::Kinectperson.Text, global::Kinectperson.Response>(
        MethodType.Unary,
        __ServiceName,
        "SendConsoleCommand",
        __Marshaller_Text,
        __Marshaller_Response);

    static readonly Method<global::Kinectperson.Text, global::Kinectperson.Response> __Method_CreateRobotClient = new Method<global::Kinectperson.Text, global::Kinectperson.Response>(
        MethodType.Unary,
        __ServiceName,
        "CreateRobotClient",
        __Marshaller_Text,
        __Marshaller_Response);

    static readonly Method<global::Kinectperson.PointStream, global::Kinectperson.Response> __Method_SendPointStream = new Method<global::Kinectperson.PointStream, global::Kinectperson.Response>(
        MethodType.ClientStreaming,
        __ServiceName,
        "SendPointStream",
        __Marshaller_PointStream,
        __Marshaller_Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Kinectperson.KinectPersonReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of KinectPerson</summary>
    public abstract class KinectPersonBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Kinectperson.Response> SendPersonState(global::Kinectperson.PersonStream request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kinectperson.Response> SendVoiceRecognition(global::Kinectperson.Text request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kinectperson.Response> SendConsoleCommand(global::Kinectperson.Text request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kinectperson.Response> CreateRobotClient(global::Kinectperson.Text request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kinectperson.Response> SendPointStream(IAsyncStreamReader<global::Kinectperson.PointStream> requestStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for KinectPerson</summary>
    public class KinectPersonClient : ClientBase<KinectPersonClient>
    {
      /// <summary>Creates a new client for KinectPerson</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public KinectPersonClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for KinectPerson that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public KinectPersonClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected KinectPersonClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected KinectPersonClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Kinectperson.Response SendPersonState(global::Kinectperson.PersonStream request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendPersonState(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kinectperson.Response SendPersonState(global::Kinectperson.PersonStream request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendPersonState, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Kinectperson.Response> SendPersonStateAsync(global::Kinectperson.PersonStream request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendPersonStateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Kinectperson.Response> SendPersonStateAsync(global::Kinectperson.PersonStream request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendPersonState, null, options, request);
      }
      public virtual global::Kinectperson.Response SendVoiceRecognition(global::Kinectperson.Text request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendVoiceRecognition(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kinectperson.Response SendVoiceRecognition(global::Kinectperson.Text request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendVoiceRecognition, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Kinectperson.Response> SendVoiceRecognitionAsync(global::Kinectperson.Text request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendVoiceRecognitionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Kinectperson.Response> SendVoiceRecognitionAsync(global::Kinectperson.Text request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendVoiceRecognition, null, options, request);
      }
      public virtual global::Kinectperson.Response SendConsoleCommand(global::Kinectperson.Text request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendConsoleCommand(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kinectperson.Response SendConsoleCommand(global::Kinectperson.Text request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendConsoleCommand, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Kinectperson.Response> SendConsoleCommandAsync(global::Kinectperson.Text request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendConsoleCommandAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Kinectperson.Response> SendConsoleCommandAsync(global::Kinectperson.Text request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendConsoleCommand, null, options, request);
      }
      public virtual global::Kinectperson.Response CreateRobotClient(global::Kinectperson.Text request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateRobotClient(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kinectperson.Response CreateRobotClient(global::Kinectperson.Text request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRobotClient, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Kinectperson.Response> CreateRobotClientAsync(global::Kinectperson.Text request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateRobotClientAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Kinectperson.Response> CreateRobotClientAsync(global::Kinectperson.Text request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRobotClient, null, options, request);
      }
      public virtual AsyncClientStreamingCall<global::Kinectperson.PointStream, global::Kinectperson.Response> SendPointStream(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendPointStream(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncClientStreamingCall<global::Kinectperson.PointStream, global::Kinectperson.Response> SendPointStream(CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_SendPointStream, null, options);
      }
      protected override KinectPersonClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new KinectPersonClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(KinectPersonBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendPersonState, serviceImpl.SendPersonState)
          .AddMethod(__Method_SendVoiceRecognition, serviceImpl.SendVoiceRecognition)
          .AddMethod(__Method_SendConsoleCommand, serviceImpl.SendConsoleCommand)
          .AddMethod(__Method_CreateRobotClient, serviceImpl.CreateRobotClient)
          .AddMethod(__Method_SendPointStream, serviceImpl.SendPointStream).Build();
    }

  }
}
#endregion
