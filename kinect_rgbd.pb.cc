// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinect_rgbd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kinect_rgbd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kinectrgbd {

namespace {

const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pixels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pixels_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Points_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Points_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tag_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitStream_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_kinect_5frgbd_2eproto() {
  protobuf_AddDesc_kinect_5frgbd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kinect_rgbd.proto");
  GOOGLE_CHECK(file != NULL);
  Header_descriptor_ = file->message_type(0);
  static const int Header_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, data_),
  };
  Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      -1,
      -1,
      -1,
      sizeof(Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _is_default_instance_));
  Bit_descriptor_ = file->message_type(1);
  static const int Bit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bit, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bit, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bit, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bit, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bit, name_),
  };
  Bit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Bit_descriptor_,
      Bit::default_instance_,
      Bit_offsets_,
      -1,
      -1,
      -1,
      sizeof(Bit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bit, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bit, _is_default_instance_));
  Request_descriptor_ = file->message_type(2);
  static const int Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, args_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Response_descriptor_ = file->message_type(3);
  static const int Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, finish_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  Pixels_descriptor_ = file->message_type(4);
  static const int Pixels_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pixels, color_),
  };
  Pixels_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pixels_descriptor_,
      Pixels::default_instance_,
      Pixels_offsets_,
      -1,
      -1,
      -1,
      sizeof(Pixels),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pixels, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pixels, _is_default_instance_));
  Point_descriptor_ = file->message_type(5);
  static const int Point_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, color_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _is_default_instance_));
  Points_descriptor_ = file->message_type(6);
  static const int Points_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Points, data_),
  };
  Points_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Points_descriptor_,
      Points::default_instance_,
      Points_offsets_,
      -1,
      -1,
      -1,
      sizeof(Points),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Points, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Points, _is_default_instance_));
  Tag_descriptor_ = file->message_type(7);
  static const int Tag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, confidence_),
  };
  Tag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Tag_descriptor_,
      Tag::default_instance_,
      Tag_offsets_,
      -1,
      -1,
      -1,
      sizeof(Tag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, _is_default_instance_));
  Data_descriptor_ = file->message_type(8);
  static const int Data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, captions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, texts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, status_),
  };
  Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      -1,
      -1,
      -1,
      sizeof(Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _is_default_instance_));
  DataStream_descriptor_ = file->message_type(9);
  static const int DataStream_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStream, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStream, data_),
  };
  DataStream_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataStream_descriptor_,
      DataStream::default_instance_,
      DataStream_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataStream),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStream, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStream, _is_default_instance_));
  BitStream_descriptor_ = file->message_type(10);
  static const int BitStream_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitStream, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitStream, data_),
  };
  BitStream_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BitStream_descriptor_,
      BitStream::default_instance_,
      BitStream_offsets_,
      -1,
      -1,
      -1,
      sizeof(BitStream),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitStream, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitStream, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kinect_5frgbd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Bit_descriptor_, &Bit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pixels_descriptor_, &Pixels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Points_descriptor_, &Points::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Tag_descriptor_, &Tag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Data_descriptor_, &Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataStream_descriptor_, &DataStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BitStream_descriptor_, &BitStream::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kinect_5frgbd_2eproto() {
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Bit::default_instance_;
  delete Bit_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Pixels::default_instance_;
  delete Pixels_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Points::default_instance_;
  delete Points_reflection_;
  delete Tag::default_instance_;
  delete Tag_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
  delete DataStream::default_instance_;
  delete DataStream_reflection_;
  delete BitStream::default_instance_;
  delete BitStream_reflection_;
}

void protobuf_AddDesc_kinect_5frgbd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021kinect_rgbd.proto\022\nkinectrgbd\"\026\n\006Heade"
    "r\022\014\n\004data\030\001 \001(\010\"H\n\003Bit\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002"
    " \001(\002\022\r\n\005width\030\003 \001(\002\022\016\n\006height\030\004 \001(\002\022\014\n\004n"
    "ame\030\005 \001(\t\"R\n\007Request\022\014\n\004mode\030\001 \001(\005\022\035\n\004da"
    "ta\030\002 \003(\0132\017.kinectrgbd.Bit\022\014\n\004once\030\003 \001(\010\022"
    "\014\n\004args\030\004 \001(\t\"\032\n\010Response\022\016\n\006finish\030\001 \001("
    "\010\"\027\n\006Pixels\022\r\n\005color\030\001 \003(\005\"7\n\005Point\022\t\n\001x"
    "\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\r\n\005color\030\004 "
    "\001(\005\")\n\006Points\022\037\n\004data\030\001 \003(\0132\021.kinectrgbd"
    ".Point\"&\n\003Tag\022\013\n\003tag\030\001 \001(\t\022\022\n\nconfidence"
    "\030\002 \001(\002\"\210\001\n\004Data\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n"
    "\001z\030\003 \001(\002\022!\n\010captions\030\004 \003(\0132\017.kinectrgbd."
    "Tag\022\035\n\004tags\030\005 \003(\0132\017.kinectrgbd.Tag\022\r\n\005te"
    "xts\030\006 \003(\t\022\016\n\006status\030\007 \001(\010\"<\n\nDataStream\022"
    "\016\n\006status\030\001 \001(\010\022\036\n\004data\030\002 \003(\0132\020.kinectrg"
    "bd.Data\":\n\tBitStream\022\016\n\006status\030\001 \001(\010\022\035\n\004"
    "data\030\002 \003(\0132\017.kinectrgbd.Bit2\235\003\n\nKinectRg"
    "bd\0229\n\014CheckRequest\022\022.kinectrgbd.Header\032\023"
    ".kinectrgbd.Request\"\000\0228\n\nSendPoints\022\022.ki"
    "nectrgbd.Points\032\024.kinectrgbd.Response\"\000\022"
    "7\n\tSendImage\022\022.kinectrgbd.Pixels\032\024.kinec"
    "trgbd.Response\"\000\022K\n\031ReturnPositionsFromP"
    "ixels\022\026.kinectrgbd.DataStream\032\024.kinectrg"
    "bd.Response\"\000\022Q\n ReturnPixelBoundsFromSp"
    "aceBounds\022\025.kinectrgbd.BitStream\032\024.kinec"
    "trgbd.Response\"\000\022A\n\017ReturnCognition\022\026.ki"
    "nectrgbd.DataStream\032\024.kinectrgbd.Respons"
    "e\"\000B\017\n\007ex.grpc\242\002\003RTGb\006proto3", 1108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kinect_rgbd.proto", &protobuf_RegisterTypes);
  Header::default_instance_ = new Header();
  Bit::default_instance_ = new Bit();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Pixels::default_instance_ = new Pixels();
  Point::default_instance_ = new Point();
  Points::default_instance_ = new Points();
  Tag::default_instance_ = new Tag();
  Data::default_instance_ = new Data();
  DataStream::default_instance_ = new DataStream();
  BitStream::default_instance_ = new BitStream();
  Header::default_instance_->InitAsDefaultInstance();
  Bit::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Pixels::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Points::default_instance_->InitAsDefaultInstance();
  Tag::default_instance_->InitAsDefaultInstance();
  Data::default_instance_->InitAsDefaultInstance();
  DataStream::default_instance_->InitAsDefaultInstance();
  BitStream::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kinect_5frgbd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kinect_5frgbd_2eproto {
  StaticDescriptorInitializer_kinect_5frgbd_2eproto() {
    protobuf_AddDesc_kinect_5frgbd_2eproto();
  }
} static_descriptor_initializer_kinect_5frgbd_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Header::kDataFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectrgbd.Header)
}

void Header::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Header::Header(const Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectrgbd.Header)
}

void Header::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  data_ = false;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:kinectrgbd.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5frgbd_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
  data_ = false;
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectrgbd.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool data = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectrgbd.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectrgbd.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectrgbd.Header)
  // optional bool data = 1;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectrgbd.Header)
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectrgbd.Header)
  // optional bool data = 1;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectrgbd.Header)
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  // optional bool data = 1;
  if (this->data() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.data() != 0) {
    set_data(from.data());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {

  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  std::swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// optional bool data = 1;
void Header::clear_data() {
  data_ = false;
}
 bool Header::data() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Header.data)
  return data_;
}
 void Header::set_data(bool value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Header.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Bit::kXFieldNumber;
const int Bit::kYFieldNumber;
const int Bit::kWidthFieldNumber;
const int Bit::kHeightFieldNumber;
const int Bit::kNameFieldNumber;
#endif  // !_MSC_VER

Bit::Bit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectrgbd.Bit)
}

void Bit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Bit::Bit(const Bit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectrgbd.Bit)
}

void Bit::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  width_ = 0;
  height_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Bit::~Bit() {
  // @@protoc_insertion_point(destructor:kinectrgbd.Bit)
  SharedDtor();
}

void Bit::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Bit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bit_descriptor_;
}

const Bit& Bit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5frgbd_2eproto();
  return *default_instance_;
}

Bit* Bit::default_instance_ = NULL;

Bit* Bit::New(::google::protobuf::Arena* arena) const {
  Bit* n = new Bit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bit::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Bit*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, height_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Bit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectrgbd.Bit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_width;
        break;
      }

      // optional float width = 3;
      case 3: {
        if (tag == 29) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }

      // optional float height = 4;
      case 4: {
        if (tag == 37) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kinectrgbd.Bit.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectrgbd.Bit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectrgbd.Bit)
  return false;
#undef DO_
}

void Bit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectrgbd.Bit)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // optional float height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kinectrgbd.Bit.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectrgbd.Bit)
}

::google::protobuf::uint8* Bit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectrgbd.Bit)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width(), target);
  }

  // optional float height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kinectrgbd.Bit.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectrgbd.Bit)
  return target;
}

int Bit::ByteSize() const {
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float width = 3;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // optional float height = 4;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bit::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Bit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Bit>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bit::MergeFrom(const Bit& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Bit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bit::CopyFrom(const Bit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bit::IsInitialized() const {

  return true;
}

void Bit::Swap(Bit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bit::InternalSwap(Bit* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bit_descriptor_;
  metadata.reflection = Bit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bit

// optional float x = 1;
void Bit::clear_x() {
  x_ = 0;
}
 float Bit::x() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Bit.x)
  return x_;
}
 void Bit::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Bit.x)
}

// optional float y = 2;
void Bit::clear_y() {
  y_ = 0;
}
 float Bit::y() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Bit.y)
  return y_;
}
 void Bit::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Bit.y)
}

// optional float width = 3;
void Bit::clear_width() {
  width_ = 0;
}
 float Bit::width() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Bit.width)
  return width_;
}
 void Bit::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Bit.width)
}

// optional float height = 4;
void Bit::clear_height() {
  height_ = 0;
}
 float Bit::height() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Bit.height)
  return height_;
}
 void Bit::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Bit.height)
}

// optional string name = 5;
void Bit::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Bit::name() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Bit.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bit::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kinectrgbd.Bit.name)
}
 void Bit::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kinectrgbd.Bit.name)
}
 void Bit::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kinectrgbd.Bit.name)
}
 ::std::string* Bit::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Bit.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bit::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bit::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:kinectrgbd.Bit.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Request::kModeFieldNumber;
const int Request::kDataFieldNumber;
const int Request::kOnceFieldNumber;
const int Request::kArgsFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectrgbd.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectrgbd.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mode_ = 0;
  once_ = false;
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:kinectrgbd.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5frgbd_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mode_, once_);
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectrgbd.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .kinectrgbd.Bit data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_once;
        break;
      }

      // optional bool once = 3;
      case 3: {
        if (tag == 24) {
         parse_once:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &once_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_args;
        break;
      }

      // optional string args = 4;
      case 4: {
        if (tag == 34) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kinectrgbd.Request.args"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectrgbd.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectrgbd.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectrgbd.Request)
  // optional int32 mode = 1;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }

  // repeated .kinectrgbd.Bit data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // optional bool once = 3;
  if (this->once() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->once(), output);
  }

  // optional string args = 4;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kinectrgbd.Request.args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->args(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectrgbd.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectrgbd.Request)
  // optional int32 mode = 1;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode(), target);
  }

  // repeated .kinectrgbd.Bit data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // optional bool once = 3;
  if (this->once() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->once(), target);
  }

  // optional string args = 4;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kinectrgbd.Request.args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->args(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectrgbd.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  // optional int32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mode());
  }

  // optional bool once = 3;
  if (this->once() != 0) {
    total_size += 1 + 1;
  }

  // optional string args = 4;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->args());
  }

  // repeated .kinectrgbd.Bit data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.once() != 0) {
    set_once(from.once());
  }
  if (from.args().size() > 0) {

    args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(mode_, other->mode_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(once_, other->once_);
  args_.Swap(&other->args_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional int32 mode = 1;
void Request::clear_mode() {
  mode_ = 0;
}
 ::google::protobuf::int32 Request::mode() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Request.mode)
  return mode_;
}
 void Request::set_mode(::google::protobuf::int32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Request.mode)
}

// repeated .kinectrgbd.Bit data = 2;
int Request::data_size() const {
  return data_.size();
}
void Request::clear_data() {
  data_.Clear();
}
const ::kinectrgbd::Bit& Request::data(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Request.data)
  return data_.Get(index);
}
::kinectrgbd::Bit* Request::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Request.data)
  return data_.Mutable(index);
}
::kinectrgbd::Bit* Request::add_data() {
  // @@protoc_insertion_point(field_add:kinectrgbd.Request.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit >*
Request::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.Request.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit >&
Request::data() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.Request.data)
  return data_;
}

// optional bool once = 3;
void Request::clear_once() {
  once_ = false;
}
 bool Request::once() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Request.once)
  return once_;
}
 void Request::set_once(bool value) {
  
  once_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Request.once)
}

// optional string args = 4;
void Request::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::args() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Request.args)
  return args_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kinectrgbd.Request.args)
}
 void Request::set_args(const char* value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kinectrgbd.Request.args)
}
 void Request::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kinectrgbd.Request.args)
}
 ::std::string* Request::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Request.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_args() {
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:kinectrgbd.Request.args)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Response::kFinishFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectrgbd.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectrgbd.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  finish_ = false;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:kinectrgbd.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5frgbd_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
  finish_ = false;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectrgbd.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool finish = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectrgbd.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectrgbd.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectrgbd.Response)
  // optional bool finish = 1;
  if (this->finish() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->finish(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectrgbd.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectrgbd.Response)
  // optional bool finish = 1;
  if (this->finish() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->finish(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectrgbd.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  // optional bool finish = 1;
  if (this->finish() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.finish() != 0) {
    set_finish(from.finish());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(finish_, other->finish_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional bool finish = 1;
void Response::clear_finish() {
  finish_ = false;
}
 bool Response::finish() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Response.finish)
  return finish_;
}
 void Response::set_finish(bool value) {
  
  finish_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Response.finish)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Pixels::kColorFieldNumber;
#endif  // !_MSC_VER

Pixels::Pixels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectrgbd.Pixels)
}

void Pixels::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Pixels::Pixels(const Pixels& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectrgbd.Pixels)
}

void Pixels::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Pixels::~Pixels() {
  // @@protoc_insertion_point(destructor:kinectrgbd.Pixels)
  SharedDtor();
}

void Pixels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pixels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pixels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pixels_descriptor_;
}

const Pixels& Pixels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5frgbd_2eproto();
  return *default_instance_;
}

Pixels* Pixels::default_instance_ = NULL;

Pixels* Pixels::New(::google::protobuf::Arena* arena) const {
  Pixels* n = new Pixels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pixels::Clear() {
  color_.Clear();
}

bool Pixels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectrgbd.Pixels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 color = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_color())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_color())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectrgbd.Pixels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectrgbd.Pixels)
  return false;
#undef DO_
}

void Pixels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectrgbd.Pixels)
  // repeated int32 color = 1;
  if (this->color_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_color_cached_byte_size_);
  }
  for (int i = 0; i < this->color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->color(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectrgbd.Pixels)
}

::google::protobuf::uint8* Pixels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectrgbd.Pixels)
  // repeated int32 color = 1;
  if (this->color_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _color_cached_byte_size_, target);
  }
  for (int i = 0; i < this->color_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->color(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectrgbd.Pixels)
  return target;
}

int Pixels::ByteSize() const {
  int total_size = 0;

  // repeated int32 color = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->color_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->color(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _color_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pixels::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Pixels* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pixels>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pixels::MergeFrom(const Pixels& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  color_.MergeFrom(from.color_);
}

void Pixels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pixels::CopyFrom(const Pixels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pixels::IsInitialized() const {

  return true;
}

void Pixels::Swap(Pixels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pixels::InternalSwap(Pixels* other) {
  color_.UnsafeArenaSwap(&other->color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pixels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pixels_descriptor_;
  metadata.reflection = Pixels_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pixels

// repeated int32 color = 1;
int Pixels::color_size() const {
  return color_.size();
}
void Pixels::clear_color() {
  color_.Clear();
}
 ::google::protobuf::int32 Pixels::color(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Pixels.color)
  return color_.Get(index);
}
 void Pixels::set_color(int index, ::google::protobuf::int32 value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:kinectrgbd.Pixels.color)
}
 void Pixels::add_color(::google::protobuf::int32 value) {
  color_.Add(value);
  // @@protoc_insertion_point(field_add:kinectrgbd.Pixels.color)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pixels::color() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.Pixels.color)
  return color_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pixels::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.Pixels.color)
  return &color_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
const int Point::kColorFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectrgbd.Point)
}

void Point::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectrgbd.Point)
}

void Point::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  color_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:kinectrgbd.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5frgbd_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, color_);

#undef ZR_HELPER_
#undef ZR_

}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectrgbd.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_color;
        break;
      }

      // optional int32 color = 4;
      case 4: {
        if (tag == 32) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectrgbd.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectrgbd.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectrgbd.Point)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional int32 color = 4;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->color(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectrgbd.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectrgbd.Point)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional int32 color = 4;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->color(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectrgbd.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 color = 4;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(color_, other->color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional float x = 1;
void Point::clear_x() {
  x_ = 0;
}
 float Point::x() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Point.x)
  return x_;
}
 void Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Point.x)
}

// optional float y = 2;
void Point::clear_y() {
  y_ = 0;
}
 float Point::y() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Point.y)
  return y_;
}
 void Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Point.y)
}

// optional float z = 3;
void Point::clear_z() {
  z_ = 0;
}
 float Point::z() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Point.z)
  return z_;
}
 void Point::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Point.z)
}

// optional int32 color = 4;
void Point::clear_color() {
  color_ = 0;
}
 ::google::protobuf::int32 Point::color() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Point.color)
  return color_;
}
 void Point::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Point.color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Points::kDataFieldNumber;
#endif  // !_MSC_VER

Points::Points()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectrgbd.Points)
}

void Points::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Points::Points(const Points& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectrgbd.Points)
}

void Points::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Points::~Points() {
  // @@protoc_insertion_point(destructor:kinectrgbd.Points)
  SharedDtor();
}

void Points::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Points::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Points::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Points_descriptor_;
}

const Points& Points::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5frgbd_2eproto();
  return *default_instance_;
}

Points* Points::default_instance_ = NULL;

Points* Points::New(::google::protobuf::Arena* arena) const {
  Points* n = new Points;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Points::Clear() {
  data_.Clear();
}

bool Points::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectrgbd.Points)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kinectrgbd.Point data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectrgbd.Points)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectrgbd.Points)
  return false;
#undef DO_
}

void Points::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectrgbd.Points)
  // repeated .kinectrgbd.Point data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectrgbd.Points)
}

::google::protobuf::uint8* Points::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectrgbd.Points)
  // repeated .kinectrgbd.Point data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectrgbd.Points)
  return target;
}

int Points::ByteSize() const {
  int total_size = 0;

  // repeated .kinectrgbd.Point data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Points::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Points* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Points>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Points::MergeFrom(const Points& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
}

void Points::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Points::CopyFrom(const Points& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Points::IsInitialized() const {

  return true;
}

void Points::Swap(Points* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Points::InternalSwap(Points* other) {
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Points::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Points_descriptor_;
  metadata.reflection = Points_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Points

// repeated .kinectrgbd.Point data = 1;
int Points::data_size() const {
  return data_.size();
}
void Points::clear_data() {
  data_.Clear();
}
const ::kinectrgbd::Point& Points::data(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Points.data)
  return data_.Get(index);
}
::kinectrgbd::Point* Points::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Points.data)
  return data_.Mutable(index);
}
::kinectrgbd::Point* Points::add_data() {
  // @@protoc_insertion_point(field_add:kinectrgbd.Points.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::kinectrgbd::Point >*
Points::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.Points.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Point >&
Points::data() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.Points.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Tag::kTagFieldNumber;
const int Tag::kConfidenceFieldNumber;
#endif  // !_MSC_VER

Tag::Tag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectrgbd.Tag)
}

void Tag::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Tag::Tag(const Tag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectrgbd.Tag)
}

void Tag::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

Tag::~Tag() {
  // @@protoc_insertion_point(destructor:kinectrgbd.Tag)
  SharedDtor();
}

void Tag::SharedDtor() {
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tag_descriptor_;
}

const Tag& Tag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5frgbd_2eproto();
  return *default_instance_;
}

Tag* Tag::default_instance_ = NULL;

Tag* Tag::New(::google::protobuf::Arena* arena) const {
  Tag* n = new Tag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tag::Clear() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

bool Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectrgbd.Tag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kinectrgbd.Tag.tag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_confidence;
        break;
      }

      // optional float confidence = 2;
      case 2: {
        if (tag == 21) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectrgbd.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectrgbd.Tag)
  return false;
#undef DO_
}

void Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectrgbd.Tag)
  // optional string tag = 1;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kinectrgbd.Tag.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // optional float confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectrgbd.Tag)
}

::google::protobuf::uint8* Tag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectrgbd.Tag)
  // optional string tag = 1;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kinectrgbd.Tag.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // optional float confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectrgbd.Tag)
  return target;
}

int Tag::ByteSize() const {
  int total_size = 0;

  // optional string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // optional float confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tag::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Tag* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Tag>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tag::MergeFrom(const Tag& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void Tag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tag::CopyFrom(const Tag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tag::IsInitialized() const {

  return true;
}

void Tag::Swap(Tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tag::InternalSwap(Tag* other) {
  tag_.Swap(&other->tag_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tag_descriptor_;
  metadata.reflection = Tag_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tag

// optional string tag = 1;
void Tag::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Tag::tag() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Tag.tag)
  return tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Tag::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kinectrgbd.Tag.tag)
}
 void Tag::set_tag(const char* value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kinectrgbd.Tag.tag)
}
 void Tag::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kinectrgbd.Tag.tag)
}
 ::std::string* Tag::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Tag.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Tag::release_tag() {
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Tag::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:kinectrgbd.Tag.tag)
}

// optional float confidence = 2;
void Tag::clear_confidence() {
  confidence_ = 0;
}
 float Tag::confidence() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Tag.confidence)
  return confidence_;
}
 void Tag::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Tag.confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Data::kXFieldNumber;
const int Data::kYFieldNumber;
const int Data::kZFieldNumber;
const int Data::kCaptionsFieldNumber;
const int Data::kTagsFieldNumber;
const int Data::kTextsFieldNumber;
const int Data::kStatusFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectrgbd.Data)
}

void Data::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Data::Data(const Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectrgbd.Data)
}

void Data::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  status_ = false;
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:kinectrgbd.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5frgbd_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Data*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);
  ZR_(z_, status_);

#undef ZR_HELPER_
#undef ZR_

  captions_.Clear();
  tags_.Clear();
  texts_.Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectrgbd.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_captions;
        break;
      }

      // repeated .kinectrgbd.Tag captions = 4;
      case 4: {
        if (tag == 34) {
         parse_captions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_captions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_captions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_captions;
        if (input->ExpectTag(42)) goto parse_loop_tags;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .kinectrgbd.Tag tags = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_tags;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_texts;
        break;
      }

      // repeated string texts = 6;
      case 6: {
        if (tag == 50) {
         parse_texts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_texts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->texts(this->texts_size() - 1).data(),
            this->texts(this->texts_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kinectrgbd.Data.texts"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_texts;
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional bool status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectrgbd.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectrgbd.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectrgbd.Data)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // repeated .kinectrgbd.Tag captions = 4;
  for (unsigned int i = 0, n = this->captions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->captions(i), output);
  }

  // repeated .kinectrgbd.Tag tags = 5;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tags(i), output);
  }

  // repeated string texts = 6;
  for (int i = 0; i < this->texts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->texts(i).data(), this->texts(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kinectrgbd.Data.texts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->texts(i), output);
  }

  // optional bool status = 7;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectrgbd.Data)
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectrgbd.Data)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // repeated .kinectrgbd.Tag captions = 4;
  for (unsigned int i = 0, n = this->captions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->captions(i), target);
  }

  // repeated .kinectrgbd.Tag tags = 5;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tags(i), target);
  }

  // repeated string texts = 6;
  for (int i = 0; i < this->texts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->texts(i).data(), this->texts(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kinectrgbd.Data.texts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->texts(i), target);
  }

  // optional bool status = 7;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectrgbd.Data)
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional bool status = 7;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // repeated .kinectrgbd.Tag captions = 4;
  total_size += 1 * this->captions_size();
  for (int i = 0; i < this->captions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->captions(i));
  }

  // repeated .kinectrgbd.Tag tags = 5;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  // repeated string texts = 6;
  total_size += 1 * this->texts_size();
  for (int i = 0; i < this->texts_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->texts(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  captions_.MergeFrom(from.captions_);
  tags_.MergeFrom(from.tags_);
  texts_.MergeFrom(from.texts_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {

  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  captions_.UnsafeArenaSwap(&other->captions_);
  tags_.UnsafeArenaSwap(&other->tags_);
  texts_.UnsafeArenaSwap(&other->texts_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// optional float x = 1;
void Data::clear_x() {
  x_ = 0;
}
 float Data::x() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.x)
  return x_;
}
 void Data::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Data.x)
}

// optional float y = 2;
void Data::clear_y() {
  y_ = 0;
}
 float Data::y() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.y)
  return y_;
}
 void Data::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Data.y)
}

// optional float z = 3;
void Data::clear_z() {
  z_ = 0;
}
 float Data::z() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.z)
  return z_;
}
 void Data::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Data.z)
}

// repeated .kinectrgbd.Tag captions = 4;
int Data::captions_size() const {
  return captions_.size();
}
void Data::clear_captions() {
  captions_.Clear();
}
const ::kinectrgbd::Tag& Data::captions(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.captions)
  return captions_.Get(index);
}
::kinectrgbd::Tag* Data::mutable_captions(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Data.captions)
  return captions_.Mutable(index);
}
::kinectrgbd::Tag* Data::add_captions() {
  // @@protoc_insertion_point(field_add:kinectrgbd.Data.captions)
  return captions_.Add();
}
::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag >*
Data::mutable_captions() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.Data.captions)
  return &captions_;
}
const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag >&
Data::captions() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.Data.captions)
  return captions_;
}

// repeated .kinectrgbd.Tag tags = 5;
int Data::tags_size() const {
  return tags_.size();
}
void Data::clear_tags() {
  tags_.Clear();
}
const ::kinectrgbd::Tag& Data::tags(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.tags)
  return tags_.Get(index);
}
::kinectrgbd::Tag* Data::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Data.tags)
  return tags_.Mutable(index);
}
::kinectrgbd::Tag* Data::add_tags() {
  // @@protoc_insertion_point(field_add:kinectrgbd.Data.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag >*
Data::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.Data.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Tag >&
Data::tags() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.Data.tags)
  return tags_;
}

// repeated string texts = 6;
int Data::texts_size() const {
  return texts_.size();
}
void Data::clear_texts() {
  texts_.Clear();
}
 const ::std::string& Data::texts(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.texts)
  return texts_.Get(index);
}
 ::std::string* Data::mutable_texts(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.Data.texts)
  return texts_.Mutable(index);
}
 void Data::set_texts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kinectrgbd.Data.texts)
  texts_.Mutable(index)->assign(value);
}
 void Data::set_texts(int index, const char* value) {
  texts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kinectrgbd.Data.texts)
}
 void Data::set_texts(int index, const char* value, size_t size) {
  texts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kinectrgbd.Data.texts)
}
 ::std::string* Data::add_texts() {
  return texts_.Add();
}
 void Data::add_texts(const ::std::string& value) {
  texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kinectrgbd.Data.texts)
}
 void Data::add_texts(const char* value) {
  texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kinectrgbd.Data.texts)
}
 void Data::add_texts(const char* value, size_t size) {
  texts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kinectrgbd.Data.texts)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Data::texts() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.Data.texts)
  return texts_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Data::mutable_texts() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.Data.texts)
  return &texts_;
}

// optional bool status = 7;
void Data::clear_status() {
  status_ = false;
}
 bool Data::status() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.Data.status)
  return status_;
}
 void Data::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.Data.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DataStream::kStatusFieldNumber;
const int DataStream::kDataFieldNumber;
#endif  // !_MSC_VER

DataStream::DataStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectrgbd.DataStream)
}

void DataStream::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataStream::DataStream(const DataStream& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectrgbd.DataStream)
}

void DataStream::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = false;
}

DataStream::~DataStream() {
  // @@protoc_insertion_point(destructor:kinectrgbd.DataStream)
  SharedDtor();
}

void DataStream::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataStream_descriptor_;
}

const DataStream& DataStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5frgbd_2eproto();
  return *default_instance_;
}

DataStream* DataStream::default_instance_ = NULL;

DataStream* DataStream::New(::google::protobuf::Arena* arena) const {
  DataStream* n = new DataStream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataStream::Clear() {
  status_ = false;
  data_.Clear();
}

bool DataStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectrgbd.DataStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .kinectrgbd.Data data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectrgbd.DataStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectrgbd.DataStream)
  return false;
#undef DO_
}

void DataStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectrgbd.DataStream)
  // optional bool status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // repeated .kinectrgbd.Data data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectrgbd.DataStream)
}

::google::protobuf::uint8* DataStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectrgbd.DataStream)
  // optional bool status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // repeated .kinectrgbd.Data data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectrgbd.DataStream)
  return target;
}

int DataStream::ByteSize() const {
  int total_size = 0;

  // optional bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // repeated .kinectrgbd.Data data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataStream::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DataStream* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataStream>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataStream::MergeFrom(const DataStream& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void DataStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataStream::CopyFrom(const DataStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStream::IsInitialized() const {

  return true;
}

void DataStream::Swap(DataStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataStream::InternalSwap(DataStream* other) {
  std::swap(status_, other->status_);
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataStream_descriptor_;
  metadata.reflection = DataStream_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataStream

// optional bool status = 1;
void DataStream::clear_status() {
  status_ = false;
}
 bool DataStream::status() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.DataStream.status)
  return status_;
}
 void DataStream::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.DataStream.status)
}

// repeated .kinectrgbd.Data data = 2;
int DataStream::data_size() const {
  return data_.size();
}
void DataStream::clear_data() {
  data_.Clear();
}
const ::kinectrgbd::Data& DataStream::data(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.DataStream.data)
  return data_.Get(index);
}
::kinectrgbd::Data* DataStream::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.DataStream.data)
  return data_.Mutable(index);
}
::kinectrgbd::Data* DataStream::add_data() {
  // @@protoc_insertion_point(field_add:kinectrgbd.DataStream.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::kinectrgbd::Data >*
DataStream::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.DataStream.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Data >&
DataStream::data() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.DataStream.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BitStream::kStatusFieldNumber;
const int BitStream::kDataFieldNumber;
#endif  // !_MSC_VER

BitStream::BitStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kinectrgbd.BitStream)
}

void BitStream::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BitStream::BitStream(const BitStream& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kinectrgbd.BitStream)
}

void BitStream::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = false;
}

BitStream::~BitStream() {
  // @@protoc_insertion_point(destructor:kinectrgbd.BitStream)
  SharedDtor();
}

void BitStream::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BitStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitStream_descriptor_;
}

const BitStream& BitStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kinect_5frgbd_2eproto();
  return *default_instance_;
}

BitStream* BitStream::default_instance_ = NULL;

BitStream* BitStream::New(::google::protobuf::Arena* arena) const {
  BitStream* n = new BitStream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BitStream::Clear() {
  status_ = false;
  data_.Clear();
}

bool BitStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kinectrgbd.BitStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .kinectrgbd.Bit data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kinectrgbd.BitStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kinectrgbd.BitStream)
  return false;
#undef DO_
}

void BitStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kinectrgbd.BitStream)
  // optional bool status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // repeated .kinectrgbd.Bit data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kinectrgbd.BitStream)
}

::google::protobuf::uint8* BitStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kinectrgbd.BitStream)
  // optional bool status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // repeated .kinectrgbd.Bit data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kinectrgbd.BitStream)
  return target;
}

int BitStream::ByteSize() const {
  int total_size = 0;

  // optional bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // repeated .kinectrgbd.Bit data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitStream::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BitStream* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BitStream>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitStream::MergeFrom(const BitStream& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void BitStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitStream::CopyFrom(const BitStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitStream::IsInitialized() const {

  return true;
}

void BitStream::Swap(BitStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitStream::InternalSwap(BitStream* other) {
  std::swap(status_, other->status_);
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BitStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitStream_descriptor_;
  metadata.reflection = BitStream_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BitStream

// optional bool status = 1;
void BitStream::clear_status() {
  status_ = false;
}
 bool BitStream::status() const {
  // @@protoc_insertion_point(field_get:kinectrgbd.BitStream.status)
  return status_;
}
 void BitStream::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:kinectrgbd.BitStream.status)
}

// repeated .kinectrgbd.Bit data = 2;
int BitStream::data_size() const {
  return data_.size();
}
void BitStream::clear_data() {
  data_.Clear();
}
const ::kinectrgbd::Bit& BitStream::data(int index) const {
  // @@protoc_insertion_point(field_get:kinectrgbd.BitStream.data)
  return data_.Get(index);
}
::kinectrgbd::Bit* BitStream::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:kinectrgbd.BitStream.data)
  return data_.Mutable(index);
}
::kinectrgbd::Bit* BitStream::add_data() {
  // @@protoc_insertion_point(field_add:kinectrgbd.BitStream.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit >*
BitStream::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:kinectrgbd.BitStream.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::kinectrgbd::Bit >&
BitStream::data() const {
  // @@protoc_insertion_point(field_list:kinectrgbd.BitStream.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace kinectrgbd

// @@protoc_insertion_point(global_scope)
