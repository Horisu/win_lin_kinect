// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: kinect_person.proto

#include "kinect_person.pb.h"
#include "kinect_person.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace kinectperson {

static const char* KinectPerson_method_names[] = {
  "/kinectperson.KinectPerson/SendPersonState",
  "/kinectperson.KinectPerson/SendVoiceRecognition",
  "/kinectperson.KinectPerson/SendConsoleCommand",
  "/kinectperson.KinectPerson/CreateRobotClient",
};

std::unique_ptr< KinectPerson::Stub> KinectPerson::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< KinectPerson::Stub> stub(new KinectPerson::Stub(channel));
  return stub;
}

KinectPerson::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendPersonState_(KinectPerson_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendVoiceRecognition_(KinectPerson_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendConsoleCommand_(KinectPerson_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRobotClient_(KinectPerson_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KinectPerson::Stub::SendPersonState(::grpc::ClientContext* context, const ::kinectperson::PersonStream& request, ::kinectperson::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SendPersonState_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectperson::Response>* KinectPerson::Stub::AsyncSendPersonStateRaw(::grpc::ClientContext* context, const ::kinectperson::PersonStream& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>(channel_.get(), cq, rpcmethod_SendPersonState_, context, request);
}

::grpc::Status KinectPerson::Stub::SendVoiceRecognition(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::kinectperson::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SendVoiceRecognition_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectperson::Response>* KinectPerson::Stub::AsyncSendVoiceRecognitionRaw(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>(channel_.get(), cq, rpcmethod_SendVoiceRecognition_, context, request);
}

::grpc::Status KinectPerson::Stub::SendConsoleCommand(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::kinectperson::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SendConsoleCommand_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectperson::Response>* KinectPerson::Stub::AsyncSendConsoleCommandRaw(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>(channel_.get(), cq, rpcmethod_SendConsoleCommand_, context, request);
}

::grpc::Status KinectPerson::Stub::CreateRobotClient(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::kinectperson::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateRobotClient_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kinectperson::Response>* KinectPerson::Stub::AsyncCreateRobotClientRaw(::grpc::ClientContext* context, const ::kinectperson::Text& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::kinectperson::Response>(channel_.get(), cq, rpcmethod_CreateRobotClient_, context, request);
}

KinectPerson::Service::Service() {
  (void)KinectPerson_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectPerson_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectPerson::Service, ::kinectperson::PersonStream, ::kinectperson::Response>(
          std::mem_fn(&KinectPerson::Service::SendPersonState), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectPerson_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectPerson::Service, ::kinectperson::Text, ::kinectperson::Response>(
          std::mem_fn(&KinectPerson::Service::SendVoiceRecognition), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectPerson_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectPerson::Service, ::kinectperson::Text, ::kinectperson::Response>(
          std::mem_fn(&KinectPerson::Service::SendConsoleCommand), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      KinectPerson_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< KinectPerson::Service, ::kinectperson::Text, ::kinectperson::Response>(
          std::mem_fn(&KinectPerson::Service::CreateRobotClient), this)));
}

KinectPerson::Service::~Service() {
}

::grpc::Status KinectPerson::Service::SendPersonState(::grpc::ServerContext* context, const ::kinectperson::PersonStream* request, ::kinectperson::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KinectPerson::Service::SendVoiceRecognition(::grpc::ServerContext* context, const ::kinectperson::Text* request, ::kinectperson::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KinectPerson::Service::SendConsoleCommand(::grpc::ServerContext* context, const ::kinectperson::Text* request, ::kinectperson::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KinectPerson::Service::CreateRobotClient(::grpc::ServerContext* context, const ::kinectperson::Text* request, ::kinectperson::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kinectperson

